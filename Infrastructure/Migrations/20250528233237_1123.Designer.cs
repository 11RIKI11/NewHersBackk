// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250528233237_1123")]
    partial class _1123
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dd27a6a-184e-4551-ad20-f52f0dcd6064"),
                            BirthDate = new DateTime(2001, 4, 25, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(108),
                            CreatedAt = new DateTime(2025, 5, 27, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "718865534",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("5b41bfd2-58a2-4ff8-b93a-e0f0a4fcf43a"),
                            BirthDate = new DateTime(2009, 4, 4, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(115),
                            CreatedAt = new DateTime(2025, 5, 26, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4502 678399",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("01d1a3cb-c755-4f4e-aa2a-c76137a8a83f"),
                            BirthDate = new DateTime(2002, 6, 30, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(121),
                            CreatedAt = new DateTime(2025, 5, 25, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "712802455",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("caeb001b-94ce-4d3f-98a4-34562166d2be"),
                            BirthDate = new DateTime(2003, 12, 7, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(123),
                            CreatedAt = new DateTime(2025, 5, 24, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4504 817765",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("f548e346-c90e-4318-90fa-906cde53294e"),
                            BirthDate = new DateTime(2009, 11, 27, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(126),
                            CreatedAt = new DateTime(2025, 5, 23, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "713862583",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("1e428722-0b34-4d57-bba9-90448ddde796"),
                            BirthDate = new DateTime(2001, 6, 23, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(128),
                            CreatedAt = new DateTime(2025, 5, 22, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4506 855098",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("3494ab55-fe00-4670-a555-647fc500cafa"),
                            BirthDate = new DateTime(2007, 1, 21, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(131),
                            CreatedAt = new DateTime(2025, 5, 21, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "711212606",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("87001af7-a18b-454f-b26e-b56649fddd7f"),
                            BirthDate = new DateTime(2007, 1, 21, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(133),
                            CreatedAt = new DateTime(2025, 5, 20, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4508 643450",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("657fc2fa-e9ba-4380-bc5e-3c4fe5119a4e"),
                            BirthDate = new DateTime(2005, 12, 13, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(135),
                            CreatedAt = new DateTime(2025, 5, 19, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "711634575",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("f8c6b3d8-72aa-4608-8070-2e4f9ebe7de2"),
                            BirthDate = new DateTime(2002, 3, 30, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(140),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4510 623365",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("47d6f01f-d500-4f1d-9037-93ac636e8d35"),
                            BirthDate = new DateTime(2001, 6, 4, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(142),
                            CreatedAt = new DateTime(2025, 5, 17, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "712073154",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("980cd6cf-0e03-4a1e-ad66-124e354e7837"),
                            BirthDate = new DateTime(2006, 7, 9, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(145),
                            CreatedAt = new DateTime(2025, 5, 16, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4512 600394",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("649f4418-96e7-4940-94b1-69ccc7d6ef6c"),
                            BirthDate = new DateTime(2004, 5, 15, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(147),
                            CreatedAt = new DateTime(2025, 5, 15, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "716799978",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("df88caf8-a0e4-4e26-a7e8-7e4c50bbe6f2"),
                            BirthDate = new DateTime(2007, 7, 26, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(149),
                            CreatedAt = new DateTime(2025, 5, 14, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4514 537125",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("bf6e3462-872c-4645-9341-f6fe7afef52b"),
                            BirthDate = new DateTime(2001, 4, 8, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(151),
                            CreatedAt = new DateTime(2025, 5, 13, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "716224392",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("aabc3999-3d24-40de-9901-dbcf4933ef81"),
                            BirthDate = new DateTime(2001, 9, 30, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(153),
                            CreatedAt = new DateTime(2025, 5, 12, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4516 394364",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("8328bda3-f796-4ddd-8f90-e7ca8ebf2742"),
                            BirthDate = new DateTime(2001, 4, 7, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(155),
                            CreatedAt = new DateTime(2025, 5, 11, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "712929647",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("985a6368-12aa-459c-a665-a5f518f0841b"),
                            BirthDate = new DateTime(2007, 6, 6, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(160),
                            CreatedAt = new DateTime(2025, 5, 10, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4518 345477",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("48dd6e57-ca1b-48ad-847e-6e9d27fbb0dc"),
                            BirthDate = new DateTime(2003, 10, 6, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(162),
                            CreatedAt = new DateTime(2025, 5, 9, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "711239374",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("56de6c06-f66d-4598-adeb-f987a210e9d0"),
                            BirthDate = new DateTime(2005, 3, 21, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(164),
                            CreatedAt = new DateTime(2025, 5, 8, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4520 578262",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("318ff7d6-9b76-463a-9fd2-7da936a7c1af"),
                            BirthDate = new DateTime(2000, 8, 19, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(166),
                            CreatedAt = new DateTime(2025, 5, 7, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "712339870",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("56d5f8bd-bcb5-4253-8881-ceb57c9032ce"),
                            BirthDate = new DateTime(2008, 7, 15, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(196),
                            CreatedAt = new DateTime(2025, 5, 6, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4522 207860",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("e2aa537d-27a5-40f8-b042-6ef588554f4b"),
                            BirthDate = new DateTime(2000, 8, 16, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(198),
                            CreatedAt = new DateTime(2025, 5, 5, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "717875869",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("55cd8c2a-4692-4d22-b2de-34137050a7b4"),
                            BirthDate = new DateTime(2007, 4, 11, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(200),
                            CreatedAt = new DateTime(2025, 5, 4, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4524 736325",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("29e089cb-5276-4d6d-be17-9b9f3108bee2"),
                            BirthDate = new DateTime(2000, 8, 20, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(202),
                            CreatedAt = new DateTime(2025, 5, 3, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "715654558",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("362e4194-45ef-4686-a459-b57893b08525"),
                            BirthDate = new DateTime(2008, 9, 27, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(205),
                            CreatedAt = new DateTime(2025, 5, 2, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4526 992579",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("5c2ba55d-be89-40d2-9e2d-74a7be28f043"),
                            BirthDate = new DateTime(2002, 12, 24, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(207),
                            CreatedAt = new DateTime(2025, 5, 1, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "713213969",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("2d19f2a3-34dd-48ad-8dd3-51966f90cd70"),
                            BirthDate = new DateTime(2008, 2, 17, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(209),
                            CreatedAt = new DateTime(2025, 4, 30, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4528 772900",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("197a2436-b26b-40f1-a888-505643b82c40"),
                            BirthDate = new DateTime(2009, 1, 29, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(211),
                            CreatedAt = new DateTime(2025, 4, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "716472995",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("0669ec7f-ff0f-4a33-9c5b-5af88e811c14"),
                            BirthDate = new DateTime(2005, 11, 1, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(213),
                            CreatedAt = new DateTime(2025, 4, 28, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            DocumentNumber = "4530 239238",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 5, 29, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 5, 29, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("480c2371-2846-4850-bc9a-ab760e9e88a9"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 5, 30, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 5, 30, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("e62d4183-01a6-4f18-af55-50fd3211e75d"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 5, 31, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 5, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 3, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 3, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 5, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("956cdde4-5a23-44b8-bc4e-55aa55806504"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 6, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("cfe454d6-0684-4d1c-8165-a40501c015ba"),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 7, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 7, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bc52ae4-d907-4d53-ac43-b882796f007f"),
                            Amount = 3200m,
                            BuyerId = new Guid("a629e557-c29f-485b-a66e-f2383cae1d85"),
                            CreatedAt = new DateTime(2025, 5, 24, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 24, 23, 55, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/4bc52ae4-d907-4d53-ac43-b882796f007f",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("a5b43996-2ac6-4d03-babc-5ca93b682183"),
                            Amount = 4800m,
                            BuyerId = new Guid("750c58e8-c0b7-41df-adfd-6d81e5c78270"),
                            CreatedAt = new DateTime(2025, 5, 25, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 25, 23, 45, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/a5b43996-2ac6-4d03-babc-5ca93b682183",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("ded1c376-a9f8-4b08-b1b3-ebd6ccca450b"),
                            Amount = 2800m,
                            BuyerId = new Guid("209f6406-c0d9-4746-a331-7bcdfa8adbb5"),
                            CreatedAt = new DateTime(2025, 5, 26, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 26, 23, 42, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/ded1c376-a9f8-4b08-b1b3-ebd6ccca450b",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("0e496b9c-c118-4ea2-b827-777697579ede"),
                            Amount = 3200m,
                            BuyerId = new Guid("3b0c9ccb-d69f-4737-aa76-f33042a0e3c5"),
                            CreatedAt = new DateTime(2025, 5, 27, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 27, 23, 59, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/0e496b9c-c118-4ea2-b827-777697579ede",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("1549a32c-d436-46d5-9d8b-0654a769c008"),
                            Amount = 3400m,
                            BuyerId = new Guid("5aeee997-67cb-42c3-a2ed-935f71adeedb"),
                            CreatedAt = new DateTime(2025, 5, 28, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 28, 23, 46, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/1549a32c-d436-46d5-9d8b-0654a769c008",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("41b9dd93-92b4-4a52-a4f0-31c559ea7d8e"),
                            Amount = 4000m,
                            BuyerId = new Guid("2a8e223f-8a9d-434e-9095-d331231327d8"),
                            CreatedAt = new DateTime(2025, 5, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 29, 23, 40, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/41b9dd93-92b4-4a52-a4f0-31c559ea7d8e",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("3f5fc001-6a82-4062-92bc-05a858d35f69"),
                            Amount = 3000m,
                            BuyerId = new Guid("cca1e704-ef85-4bfd-8c34-b4789993848e"),
                            CreatedAt = new DateTime(2025, 5, 30, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 30, 23, 39, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/3f5fc001-6a82-4062-92bc-05a858d35f69",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("d597cf68-d72d-472e-8782-5ee5743fba5b"),
                            Amount = 2200m,
                            BuyerId = new Guid("760dbc5d-c1c8-4c5c-af2e-4ea14de93f57"),
                            CreatedAt = new DateTime(2025, 5, 31, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 5, 31, 23, 44, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/d597cf68-d72d-472e-8782-5ee5743fba5b",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("36989f8b-3979-4f8d-8db8-08cba864d988"),
                            Amount = 0m,
                            BuyerId = new Guid("760dbc5d-c1c8-4c5c-af2e-4ea14de93f57"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 6, 1, 23, 51, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/36989f8b-3979-4f8d-8db8-08cba864d988",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("53bc9c5f-79da-4d2d-85e2-4f902e437535"),
                            Amount = 0m,
                            BuyerId = new Guid("272ef2e7-b969-4013-a1e4-3ad0c5ee960a"),
                            CreatedAt = new DateTime(2025, 6, 2, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            PaidAt = new DateTime(2025, 6, 2, 23, 49, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            QrUrl = "https://payment.example.com/53bc9c5f-79da-4d2d-85e2-4f902e437535",
                            Status = "paid"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bce582f-0a28-420d-a389-f5bbdccc7139"),
                            AttendeeId = new Guid("55cd8c2a-4692-4d22-b2de-34137050a7b4"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            PaymentId = new Guid("4bc52ae4-d907-4d53-ac43-b882796f007f"),
                            QRCode = "TKT50861467001"
                        },
                        new
                        {
                            Id = new Guid("e52176f7-06d6-4a55-989d-be6e999a11de"),
                            AttendeeId = new Guid("3dd27a6a-184e-4551-ad20-f52f0dcd6064"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            PaymentId = new Guid("4bc52ae4-d907-4d53-ac43-b882796f007f"),
                            QRCode = "TKT2c273710002"
                        },
                        new
                        {
                            Id = new Guid("20e0f81e-17fa-4036-946c-0b71eb83af77"),
                            AttendeeId = new Guid("5b41bfd2-58a2-4ff8-b93a-e0f0a4fcf43a"),
                            EventId = new Guid("956cdde4-5a23-44b8-bc4e-55aa55806504"),
                            PaymentId = new Guid("a5b43996-2ac6-4d03-babc-5ca93b682183"),
                            QRCode = "TKT956cdde4003"
                        },
                        new
                        {
                            Id = new Guid("a53a5b4b-f7f1-4f6f-a760-a3fa13341cf5"),
                            AttendeeId = new Guid("aabc3999-3d24-40de-9901-dbcf4933ef81"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            PaymentId = new Guid("a5b43996-2ac6-4d03-babc-5ca93b682183"),
                            QRCode = "TKT50861467004"
                        },
                        new
                        {
                            Id = new Guid("eeb0dc97-776b-43e0-abd6-abcb2ab211fa"),
                            AttendeeId = new Guid("aabc3999-3d24-40de-9901-dbcf4933ef81"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            PaymentId = new Guid("ded1c376-a9f8-4b08-b1b3-ebd6ccca450b"),
                            QRCode = "TKTa4434cf2005"
                        },
                        new
                        {
                            Id = new Guid("6626c6ae-1a51-4a36-9e24-7650d70578f6"),
                            AttendeeId = new Guid("47d6f01f-d500-4f1d-9037-93ac636e8d35"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            PaymentId = new Guid("ded1c376-a9f8-4b08-b1b3-ebd6ccca450b"),
                            QRCode = "TKT2c273710006"
                        },
                        new
                        {
                            Id = new Guid("098829a6-4808-4b04-a27b-4269661606ce"),
                            AttendeeId = new Guid("f548e346-c90e-4318-90fa-906cde53294e"),
                            EventId = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            PaymentId = new Guid("0e496b9c-c118-4ea2-b827-777697579ede"),
                            QRCode = "TKT70d5d1f6007"
                        },
                        new
                        {
                            Id = new Guid("9561657c-49ca-4396-8519-e002c01d0e3e"),
                            AttendeeId = new Guid("56d5f8bd-bcb5-4253-8881-ceb57c9032ce"),
                            EventId = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            PaymentId = new Guid("0e496b9c-c118-4ea2-b827-777697579ede"),
                            QRCode = "TKT70d5d1f6008"
                        },
                        new
                        {
                            Id = new Guid("2e2bcce4-bcd2-41d0-b4b7-1871bc1f4ebf"),
                            AttendeeId = new Guid("f8c6b3d8-72aa-4608-8070-2e4f9ebe7de2"),
                            EventId = new Guid("480c2371-2846-4850-bc9a-ab760e9e88a9"),
                            PaymentId = new Guid("1549a32c-d436-46d5-9d8b-0654a769c008"),
                            QRCode = "TKT480c2371009"
                        },
                        new
                        {
                            Id = new Guid("96b412c2-17b0-4b18-9587-5f2caf6ddde9"),
                            AttendeeId = new Guid("29e089cb-5276-4d6d-be17-9b9f3108bee2"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            PaymentId = new Guid("1549a32c-d436-46d5-9d8b-0654a769c008"),
                            QRCode = "TKT50861467010"
                        },
                        new
                        {
                            Id = new Guid("1efb2278-9e69-4555-a774-a702531986b9"),
                            AttendeeId = new Guid("980cd6cf-0e03-4a1e-ad66-124e354e7837"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            PaymentId = new Guid("41b9dd93-92b4-4a52-a4f0-31c559ea7d8e"),
                            QRCode = "TKTa4434cf2011"
                        },
                        new
                        {
                            Id = new Guid("5d82448b-7684-40fd-8466-12a09f3b8639"),
                            AttendeeId = new Guid("29e089cb-5276-4d6d-be17-9b9f3108bee2"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            PaymentId = new Guid("41b9dd93-92b4-4a52-a4f0-31c559ea7d8e"),
                            QRCode = "TKT50861467012"
                        },
                        new
                        {
                            Id = new Guid("8996460f-df64-4855-a8e1-b0b68bf84282"),
                            AttendeeId = new Guid("5b41bfd2-58a2-4ff8-b93a-e0f0a4fcf43a"),
                            EventId = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            PaymentId = new Guid("3f5fc001-6a82-4062-92bc-05a858d35f69"),
                            QRCode = "TKT70d5d1f6013"
                        },
                        new
                        {
                            Id = new Guid("262f238f-9cbf-4b7d-9cf3-8ab4af0ce5ef"),
                            AttendeeId = new Guid("f8c6b3d8-72aa-4608-8070-2e4f9ebe7de2"),
                            EventId = new Guid("e62d4183-01a6-4f18-af55-50fd3211e75d"),
                            PaymentId = new Guid("3f5fc001-6a82-4062-92bc-05a858d35f69"),
                            QRCode = "TKTe62d4183014"
                        },
                        new
                        {
                            Id = new Guid("d500f1cd-ae7b-4ad4-9b84-fbd0d66e9264"),
                            AttendeeId = new Guid("318ff7d6-9b76-463a-9fd2-7da936a7c1af"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            PaymentId = new Guid("d597cf68-d72d-472e-8782-5ee5743fba5b"),
                            QRCode = "TKT50861467015"
                        },
                        new
                        {
                            Id = new Guid("bb2152b8-f032-40b8-9971-37163340fcc8"),
                            EventId = new Guid("480c2371-2846-4850-bc9a-ab760e9e88a9"),
                            QRCode = "TKT480c2371016"
                        },
                        new
                        {
                            Id = new Guid("93ddb8bd-cd9e-4115-9488-d2845eb73db4"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            QRCode = "TKT2c273710017"
                        },
                        new
                        {
                            Id = new Guid("1cafe999-8411-40c2-a6c4-b201b7a0dcac"),
                            EventId = new Guid("956cdde4-5a23-44b8-bc4e-55aa55806504"),
                            QRCode = "TKT956cdde4018"
                        },
                        new
                        {
                            Id = new Guid("27209a9a-d1d5-461c-8a4d-d7e94ababd17"),
                            EventId = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            QRCode = "TKT20be07fd019"
                        },
                        new
                        {
                            Id = new Guid("17f11f75-95c4-48b1-9386-174416a3457b"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            QRCode = "TKT2c273710020"
                        },
                        new
                        {
                            Id = new Guid("37da6d6b-2a11-48ab-b4b3-5245e968c50e"),
                            EventId = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            QRCode = "TKTbb84368f021"
                        },
                        new
                        {
                            Id = new Guid("4fa09dcf-84d1-4b70-9b6e-32da891267af"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2022"
                        },
                        new
                        {
                            Id = new Guid("5979a860-fd83-4605-80be-fab0193dfca8"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            QRCode = "TKT50861467023"
                        },
                        new
                        {
                            Id = new Guid("fbfc082a-a122-4fb1-89c1-5e1fbd70df83"),
                            EventId = new Guid("e62d4183-01a6-4f18-af55-50fd3211e75d"),
                            QRCode = "TKTe62d4183024"
                        },
                        new
                        {
                            Id = new Guid("92f67a6e-1175-4352-8199-28953a96e3e6"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            QRCode = "TKT50861467025"
                        },
                        new
                        {
                            Id = new Guid("d87d49da-2d3f-4b98-8d87-0126d7672b44"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            QRCode = "TKT2c273710026"
                        },
                        new
                        {
                            Id = new Guid("3bcefddd-2e62-46ab-81f0-2217ad149b66"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2027"
                        },
                        new
                        {
                            Id = new Guid("d81baf69-4cc4-4224-86d3-2d8fffed272a"),
                            EventId = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            QRCode = "TKTbb84368f028"
                        },
                        new
                        {
                            Id = new Guid("ba01333b-96bd-4747-bf70-46ead641a425"),
                            EventId = new Guid("956cdde4-5a23-44b8-bc4e-55aa55806504"),
                            QRCode = "TKT956cdde4029"
                        },
                        new
                        {
                            Id = new Guid("58197afe-692b-4866-81f1-08d66acb4278"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2030"
                        },
                        new
                        {
                            Id = new Guid("e55ac3ec-5ad5-4dc9-9508-78e41356580a"),
                            EventId = new Guid("e62d4183-01a6-4f18-af55-50fd3211e75d"),
                            QRCode = "TKTe62d4183031"
                        },
                        new
                        {
                            Id = new Guid("5e2613eb-c2ea-41d4-a7bf-f93fbe7ad7bf"),
                            EventId = new Guid("956cdde4-5a23-44b8-bc4e-55aa55806504"),
                            QRCode = "TKT956cdde4032"
                        },
                        new
                        {
                            Id = new Guid("d6c010fc-5c99-4c66-8957-574e97eb9b5c"),
                            EventId = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            QRCode = "TKTbb84368f033"
                        },
                        new
                        {
                            Id = new Guid("51169f22-6aa5-4785-a8ec-6b63b1af4096"),
                            EventId = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            QRCode = "TKT20be07fd034"
                        },
                        new
                        {
                            Id = new Guid("7fe10f28-da25-4eec-a4d9-b3005e4d605c"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            QRCode = "TKT2c273710035"
                        },
                        new
                        {
                            Id = new Guid("9eb6ce12-c4a3-4d49-9152-29ebd11d8b30"),
                            EventId = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            QRCode = "TKT70d5d1f6036"
                        },
                        new
                        {
                            Id = new Guid("dcdc7d25-f478-48ad-b35d-890be313ad26"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2037"
                        },
                        new
                        {
                            Id = new Guid("8a2a66e8-e075-4156-83b5-97f2e344a8ad"),
                            EventId = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            QRCode = "TKT20be07fd038"
                        },
                        new
                        {
                            Id = new Guid("64cbb418-9141-4d2c-865e-6f65795c1e79"),
                            EventId = new Guid("e62d4183-01a6-4f18-af55-50fd3211e75d"),
                            QRCode = "TKTe62d4183039"
                        },
                        new
                        {
                            Id = new Guid("148aa69f-3803-49ba-be8e-a5c7c1e2a394"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2040"
                        },
                        new
                        {
                            Id = new Guid("39a83d21-a1c1-43f6-9e02-5f6bf6031229"),
                            EventId = new Guid("cfe454d6-0684-4d1c-8165-a40501c015ba"),
                            QRCode = "TKTcfe454d6041"
                        },
                        new
                        {
                            Id = new Guid("1aa6e4ff-b7a1-4908-8199-3f34a5b04239"),
                            EventId = new Guid("70d5d1f6-3ba0-48a6-b874-4ca6cdc15685"),
                            QRCode = "TKT70d5d1f6042"
                        },
                        new
                        {
                            Id = new Guid("877c5a1f-ac97-4412-bdc4-a592ec0f5740"),
                            EventId = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            QRCode = "TKT20be07fd043"
                        },
                        new
                        {
                            Id = new Guid("63ac3927-8c14-4cae-8efc-652d5abc0bb4"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2044"
                        },
                        new
                        {
                            Id = new Guid("752ce133-0bb4-42c4-b21b-09263f61870a"),
                            EventId = new Guid("2c273710-980b-4833-819f-d0e5a080fafb"),
                            QRCode = "TKT2c273710045"
                        },
                        new
                        {
                            Id = new Guid("b91913c3-577b-4418-82aa-1ed5f11d7e64"),
                            EventId = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            QRCode = "TKTbb84368f046"
                        },
                        new
                        {
                            Id = new Guid("631200b8-f08f-49e1-9f4f-96384c2a5686"),
                            EventId = new Guid("a4434cf2-41c7-42db-95b0-90db512e703f"),
                            QRCode = "TKTa4434cf2047"
                        },
                        new
                        {
                            Id = new Guid("fa89cd03-d564-4239-ad27-a3fbb87ac31e"),
                            EventId = new Guid("50861467-023d-4523-a876-9bbec4870c08"),
                            QRCode = "TKT50861467048"
                        },
                        new
                        {
                            Id = new Guid("67ccd719-2f2a-40c6-8d16-f552a988d84a"),
                            EventId = new Guid("bb84368f-ddb6-4b41-8120-e59bf3bca016"),
                            QRCode = "TKTbb84368f049"
                        },
                        new
                        {
                            Id = new Guid("feaf7312-4bbe-4b1e-8acc-279e55680ebb"),
                            EventId = new Guid("20be07fd-330d-421d-b40c-0ac8da777aba"),
                            QRCode = "TKT20be07fd050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bffea7c8-bd1d-44f9-ba5d-09175da5b007"),
                            BirthDate = new DateTime(1986, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(2),
                            CreatedAt = new DateTime(2025, 4, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("146a3816-101a-4f15-98e6-eca8712b0bf6"),
                            BirthDate = new DateTime(2003, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(12),
                            CreatedAt = new DateTime(2025, 4, 30, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("cca1e704-ef85-4bfd-8c34-b4789993848e"),
                            BirthDate = new DateTime(1996, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(15),
                            CreatedAt = new DateTime(2025, 5, 1, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("764702d4-e181-487c-8c90-4816aac68409"),
                            BirthDate = new DateTime(2002, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(18),
                            CreatedAt = new DateTime(2025, 5, 2, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5aeee997-67cb-42c3-a2ed-935f71adeedb"),
                            BirthDate = new DateTime(1997, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(21),
                            CreatedAt = new DateTime(2025, 5, 3, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("272ef2e7-b969-4013-a1e4-3ad0c5ee960a"),
                            BirthDate = new DateTime(1991, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(24),
                            CreatedAt = new DateTime(2025, 5, 4, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("849e8951-ef8a-4cef-ac27-5c9ebe6c67b9"),
                            BirthDate = new DateTime(1988, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(26),
                            CreatedAt = new DateTime(2025, 5, 5, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("750c58e8-c0b7-41df-adfd-6d81e5c78270"),
                            BirthDate = new DateTime(1986, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(29),
                            CreatedAt = new DateTime(2025, 5, 6, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5f4dd51b-7cf4-422d-9a82-16f5c0d3b2cf"),
                            BirthDate = new DateTime(1999, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(32),
                            CreatedAt = new DateTime(2025, 5, 7, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c2f6c3a2-7bc5-4e27-b126-755903caf4d0"),
                            BirthDate = new DateTime(1991, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(67),
                            CreatedAt = new DateTime(2025, 5, 8, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("760dbc5d-c1c8-4c5c-af2e-4ea14de93f57"),
                            BirthDate = new DateTime(1990, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(69),
                            CreatedAt = new DateTime(2025, 5, 9, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("e4aa8534-e9ba-4b5c-bb65-da376bef28f8"),
                            BirthDate = new DateTime(1989, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(71),
                            CreatedAt = new DateTime(2025, 5, 10, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("d7d973ce-608d-4d73-9ef5-f62f0a3432b0"),
                            BirthDate = new DateTime(1990, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(73),
                            CreatedAt = new DateTime(2025, 5, 11, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5d337e73-5e3d-47fa-a37e-c5fb8cd45f65"),
                            BirthDate = new DateTime(1986, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(75),
                            CreatedAt = new DateTime(2025, 5, 12, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("3b0c9ccb-d69f-4737-aa76-f33042a0e3c5"),
                            BirthDate = new DateTime(1991, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(78),
                            CreatedAt = new DateTime(2025, 5, 13, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2a8e223f-8a9d-434e-9095-d331231327d8"),
                            BirthDate = new DateTime(1999, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(80),
                            CreatedAt = new DateTime(2025, 5, 14, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("209f6406-c0d9-4746-a331-7bcdfa8adbb5"),
                            BirthDate = new DateTime(2002, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(83),
                            CreatedAt = new DateTime(2025, 5, 15, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("a629e557-c29f-485b-a66e-f2383cae1d85"),
                            BirthDate = new DateTime(1989, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(86),
                            CreatedAt = new DateTime(2025, 5, 16, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b5566dfa-d5ea-4deb-a32f-6f49135a17cc"),
                            BirthDate = new DateTime(1993, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(89),
                            CreatedAt = new DateTime(2025, 5, 17, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("835fd28e-55dd-48ac-a31c-6f8eb9b2a863"),
                            BirthDate = new DateTime(2005, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(91),
                            CreatedAt = new DateTime(2025, 5, 18, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b29e5b06-64c7-4da1-9e00-91a58c418aa0"),
                            BirthDate = new DateTime(1993, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(96),
                            CreatedAt = new DateTime(2025, 3, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("9eb62e73-ab4c-495e-b573-b0a96ad20ce8"),
                            BirthDate = new DateTime(1992, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(100),
                            CreatedAt = new DateTime(2025, 3, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("27df8989-674e-4c7a-899f-a5cceba157ed"),
                            BirthDate = new DateTime(1988, 5, 28, 23, 32, 37, 14, DateTimeKind.Utc).AddTicks(102),
                            CreatedAt = new DateTime(2025, 3, 29, 23, 32, 37, 13, DateTimeKind.Utc).AddTicks(9846),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
