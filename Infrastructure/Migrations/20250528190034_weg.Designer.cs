// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250528190034_weg")]
    partial class weg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b66f430e-c88c-449c-99b8-9af5be26dde2"),
                            BirthDate = new DateTime(2003, 4, 14, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4639),
                            CreatedAt = new DateTime(2025, 5, 27, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "714307764",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("a94ab26c-c597-4a1d-aa9e-5400ca4d3b87"),
                            BirthDate = new DateTime(2004, 5, 17, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4646),
                            CreatedAt = new DateTime(2025, 5, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4502 241503",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("d444a7bf-7a05-4025-9f73-259160a7a0d3"),
                            BirthDate = new DateTime(2009, 8, 7, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4653),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "716102300",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("a810f716-ba82-4a86-8817-fb843dc21550"),
                            BirthDate = new DateTime(2006, 2, 15, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4658),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4504 120376",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("de08c01f-ecb5-4994-91f0-160aca1d5404"),
                            BirthDate = new DateTime(2007, 3, 25, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4662),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "716836404",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("eec0becd-b01d-477a-8df7-7c74d521f57e"),
                            BirthDate = new DateTime(2002, 8, 24, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4666),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4506 898402",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("8a4c9180-9da6-4470-99fb-1a4f51712a2c"),
                            BirthDate = new DateTime(2001, 12, 12, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4669),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "714758423",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("48859492-7a6c-416b-bce2-5342b435a15e"),
                            BirthDate = new DateTime(2009, 9, 19, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4672),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4508 297700",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("d1a8915f-741f-4193-831f-621a83f8ecaa"),
                            BirthDate = new DateTime(2003, 12, 9, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4674),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "717256181",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("0adbd4b1-b61b-42a8-9970-996fd3e4ae85"),
                            BirthDate = new DateTime(2009, 5, 14, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4678),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4510 578209",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("217572ac-7775-4436-b77d-68bb9775b489"),
                            BirthDate = new DateTime(2000, 6, 8, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4682),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "716790394",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("1acb8846-92d2-48e7-96bf-c0355c8b7abd"),
                            BirthDate = new DateTime(2002, 1, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4687),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4512 902704",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("b6cae1c7-90cc-4617-8035-e62e1eb3c4b7"),
                            BirthDate = new DateTime(2008, 1, 9, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4690),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "711432257",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("b33f4281-b14d-4097-a784-9c9b728c6fa8"),
                            BirthDate = new DateTime(2000, 10, 12, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4693),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4514 604664",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("f209d43e-c7b5-428a-abc5-be4b758691b1"),
                            BirthDate = new DateTime(2002, 1, 16, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4695),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "716281965",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("e60c9626-d1e5-4004-82cb-12e2e3698725"),
                            BirthDate = new DateTime(2002, 4, 25, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4698),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4516 875553",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("5e189796-0ab4-4497-9139-37276f60ce65"),
                            BirthDate = new DateTime(2004, 7, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4701),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "711960668",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("519134c9-7930-4be0-a81d-d6aa46c88b4d"),
                            BirthDate = new DateTime(2004, 12, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4704),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4518 382738",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("1081c702-c93d-4223-a746-72860977de96"),
                            BirthDate = new DateTime(2002, 7, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4707),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "719473859",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("17dfefdb-fb66-4ad1-aa39-528d120607ea"),
                            BirthDate = new DateTime(2003, 4, 6, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4711),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4520 362902",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("a2c8b30c-4544-4622-a86c-e3a7773f17f7"),
                            BirthDate = new DateTime(2002, 12, 27, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4714),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "717547576",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("479c27a3-64c8-4c92-8387-f549dcff9f52"),
                            BirthDate = new DateTime(2009, 7, 16, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4716),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4522 199316",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("c029a183-c9cf-4b8c-a0cf-dc723c0a38fc"),
                            BirthDate = new DateTime(2000, 12, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4720),
                            CreatedAt = new DateTime(2025, 5, 5, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "719848327",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("0e97d68d-73a1-4c8a-9dc8-c66c5638f337"),
                            BirthDate = new DateTime(2009, 12, 31, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4722),
                            CreatedAt = new DateTime(2025, 5, 4, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4524 754480",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("90f96b7f-f83e-459c-92e2-c5db525dd848"),
                            BirthDate = new DateTime(2001, 10, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4725),
                            CreatedAt = new DateTime(2025, 5, 3, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "719747977",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("c0764839-60c4-4fb2-ac41-5da2c14cb900"),
                            BirthDate = new DateTime(2006, 5, 11, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4728),
                            CreatedAt = new DateTime(2025, 5, 2, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4526 605755",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("7ff65f2a-e945-4354-b448-af10bfacf5cc"),
                            BirthDate = new DateTime(2000, 8, 5, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4730),
                            CreatedAt = new DateTime(2025, 5, 1, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "718180374",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("51dad4af-b470-42a2-b2d8-b99868eff818"),
                            BirthDate = new DateTime(2006, 12, 30, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4757),
                            CreatedAt = new DateTime(2025, 4, 30, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4528 360601",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("78956fbf-a557-49bc-9c17-8cfac784d36c"),
                            BirthDate = new DateTime(2006, 7, 1, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4760),
                            CreatedAt = new DateTime(2025, 4, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "718177088",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("6cef6402-7ea0-4e6a-8b49-56386ba99ceb"),
                            BirthDate = new DateTime(2001, 8, 27, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4764),
                            CreatedAt = new DateTime(2025, 4, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            DocumentNumber = "4530 929068",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 5, 29, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 5, 29, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 5, 30, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 5, 30, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("7509cb6d-b5d8-4690-9523-8d0661aea6bf"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 5, 31, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 5, 31, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("5738ff8a-ed21-49a7-92dc-1b22f6495f10"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 1, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 3, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 3, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("bab876e3-e298-4dcc-a9f2-30300cca44d0"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 5, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 6, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("b76ab958-6527-41e0-83fe-c8b5a718f498"),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 7, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 7, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b38fd599-b239-4bea-9c08-d50433f599c9"),
                            Amount = 4600m,
                            BuyerId = new Guid("1e46df74-0e6c-48ff-9127-f26fca91e3b4"),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 24, 19, 17, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/b38fd599-b239-4bea-9c08-d50433f599c9",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("a5bb87fa-532c-48bd-8586-3d443968007d"),
                            Amount = 5000m,
                            BuyerId = new Guid("d9c01f6c-5579-44d0-bc5d-959f2735ecd9"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 25, 19, 19, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/a5bb87fa-532c-48bd-8586-3d443968007d",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("b041aff2-d763-4425-a3b2-abc744dc9083"),
                            Amount = 3200m,
                            BuyerId = new Guid("b1316131-b6f0-4706-8dfc-e3f591bb81d8"),
                            CreatedAt = new DateTime(2025, 5, 26, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 26, 19, 18, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/b041aff2-d763-4425-a3b2-abc744dc9083",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("6930dfcd-3364-4dbc-87d6-a54cd2e601ab"),
                            Amount = 3200m,
                            BuyerId = new Guid("911f2337-e499-4605-b85e-fcdcfa1ea3dd"),
                            CreatedAt = new DateTime(2025, 5, 27, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 27, 19, 25, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/6930dfcd-3364-4dbc-87d6-a54cd2e601ab",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("c655dc43-643c-4057-8494-6c18a303938d"),
                            Amount = 3200m,
                            BuyerId = new Guid("c136faa2-b4e1-455c-9f0c-526d0ebc6227"),
                            CreatedAt = new DateTime(2025, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 28, 19, 8, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/c655dc43-643c-4057-8494-6c18a303938d",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("541bc731-5927-4a88-ab84-eb91dede747a"),
                            Amount = 4600m,
                            BuyerId = new Guid("ecd35ba4-ee88-42d1-9c54-84f8d63d6745"),
                            CreatedAt = new DateTime(2025, 5, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 29, 19, 12, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/541bc731-5927-4a88-ab84-eb91dede747a",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("e0dba10e-bb43-4879-98bc-74d972f4c134"),
                            Amount = 4200m,
                            BuyerId = new Guid("f4c72e94-96a5-46f5-af7f-996c6287326f"),
                            CreatedAt = new DateTime(2025, 5, 30, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 30, 19, 26, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/e0dba10e-bb43-4879-98bc-74d972f4c134",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("105d555c-0d79-4755-9c2e-63f019ff1e75"),
                            Amount = 2400m,
                            BuyerId = new Guid("49ae2a41-d128-4a25-a0fb-3f9fb9ee8dab"),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 5, 31, 19, 27, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/105d555c-0d79-4755-9c2e-63f019ff1e75",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("2c12b941-3996-4194-88f6-f198c8443737"),
                            Amount = 0m,
                            BuyerId = new Guid("14c9d9e4-ea9d-43f3-ab4b-c477728a50b0"),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 6, 1, 19, 20, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/2c12b941-3996-4194-88f6-f198c8443737",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("348ee1ae-6ffb-42ce-9628-c005d2ae583d"),
                            Amount = 0m,
                            BuyerId = new Guid("14c9d9e4-ea9d-43f3-ab4b-c477728a50b0"),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            PaidAt = new DateTime(2025, 6, 2, 19, 22, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            QrUrl = "https://payment.example.com/348ee1ae-6ffb-42ce-9628-c005d2ae583d",
                            Status = "paid"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad9b4caf-caff-4705-8068-e2f35fda0736"),
                            AttendeeId = new Guid("d1a8915f-741f-4193-831f-621a83f8ecaa"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            PaymentId = new Guid("b38fd599-b239-4bea-9c08-d50433f599c9"),
                            QRCode = "TKT6819099e001"
                        },
                        new
                        {
                            Id = new Guid("48da781a-3e73-4d29-8b48-eec8a8c49fd6"),
                            AttendeeId = new Guid("1acb8846-92d2-48e7-96bf-c0355c8b7abd"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            PaymentId = new Guid("b38fd599-b239-4bea-9c08-d50433f599c9"),
                            QRCode = "TKTfb47d29a002"
                        },
                        new
                        {
                            Id = new Guid("ccec52e2-16c2-480d-8291-dd57a9de2b75"),
                            AttendeeId = new Guid("d444a7bf-7a05-4025-9f73-259160a7a0d3"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            PaymentId = new Guid("a5bb87fa-532c-48bd-8586-3d443968007d"),
                            QRCode = "TKT6819099e003"
                        },
                        new
                        {
                            Id = new Guid("3fb751ed-0a21-46da-9dc0-f7fa676b5718"),
                            AttendeeId = new Guid("1081c702-c93d-4223-a746-72860977de96"),
                            EventId = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            PaymentId = new Guid("a5bb87fa-532c-48bd-8586-3d443968007d"),
                            QRCode = "TKTf237b1b6004"
                        },
                        new
                        {
                            Id = new Guid("1e47cd32-95a8-4d2d-9b9e-ad113ba5e5d0"),
                            AttendeeId = new Guid("6cef6402-7ea0-4e6a-8b49-56386ba99ceb"),
                            EventId = new Guid("bab876e3-e298-4dcc-a9f2-30300cca44d0"),
                            PaymentId = new Guid("b041aff2-d763-4425-a3b2-abc744dc9083"),
                            QRCode = "TKTbab876e3005"
                        },
                        new
                        {
                            Id = new Guid("56aa58c6-1290-4818-afd0-7db3f8b2546b"),
                            AttendeeId = new Guid("de08c01f-ecb5-4994-91f0-160aca1d5404"),
                            EventId = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            PaymentId = new Guid("b041aff2-d763-4425-a3b2-abc744dc9083"),
                            QRCode = "TKT19396e78006"
                        },
                        new
                        {
                            Id = new Guid("3cd2dcdc-e33b-423b-bec1-b8fdccb6c332"),
                            AttendeeId = new Guid("b66f430e-c88c-449c-99b8-9af5be26dde2"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            PaymentId = new Guid("6930dfcd-3364-4dbc-87d6-a54cd2e601ab"),
                            QRCode = "TKT028acfbe007"
                        },
                        new
                        {
                            Id = new Guid("79c7be3a-f12f-4262-90c1-b2e8c527d799"),
                            AttendeeId = new Guid("b33f4281-b14d-4097-a784-9c9b728c6fa8"),
                            EventId = new Guid("7509cb6d-b5d8-4690-9523-8d0661aea6bf"),
                            PaymentId = new Guid("6930dfcd-3364-4dbc-87d6-a54cd2e601ab"),
                            QRCode = "TKT7509cb6d008"
                        },
                        new
                        {
                            Id = new Guid("99ad1565-bdc4-482a-b321-c1ca53cbb97f"),
                            AttendeeId = new Guid("a810f716-ba82-4a86-8817-fb843dc21550"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            PaymentId = new Guid("c655dc43-643c-4057-8494-6c18a303938d"),
                            QRCode = "TKT028acfbe009"
                        },
                        new
                        {
                            Id = new Guid("8e86177d-c476-429b-8526-54739765a7a0"),
                            AttendeeId = new Guid("78956fbf-a557-49bc-9c17-8cfac784d36c"),
                            EventId = new Guid("7509cb6d-b5d8-4690-9523-8d0661aea6bf"),
                            PaymentId = new Guid("c655dc43-643c-4057-8494-6c18a303938d"),
                            QRCode = "TKT7509cb6d010"
                        },
                        new
                        {
                            Id = new Guid("4086a15e-696b-4be8-90ee-7e2165e14195"),
                            AttendeeId = new Guid("e60c9626-d1e5-4004-82cb-12e2e3698725"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            PaymentId = new Guid("541bc731-5927-4a88-ab84-eb91dede747a"),
                            QRCode = "TKTfb47d29a011"
                        },
                        new
                        {
                            Id = new Guid("26b58f29-9495-47f9-bfb7-7cb1b4a1fbde"),
                            AttendeeId = new Guid("0e97d68d-73a1-4c8a-9dc8-c66c5638f337"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            PaymentId = new Guid("541bc731-5927-4a88-ab84-eb91dede747a"),
                            QRCode = "TKT6819099e012"
                        },
                        new
                        {
                            Id = new Guid("07f42479-9e5b-4732-a40b-06d35b8f99a9"),
                            AttendeeId = new Guid("5e189796-0ab4-4497-9139-37276f60ce65"),
                            EventId = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            PaymentId = new Guid("e0dba10e-bb43-4879-98bc-74d972f4c134"),
                            QRCode = "TKTf237b1b6013"
                        },
                        new
                        {
                            Id = new Guid("a6ebe129-4b01-43b6-a2f3-cb1bfa6ed259"),
                            AttendeeId = new Guid("a94ab26c-c597-4a1d-aa9e-5400ca4d3b87"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            PaymentId = new Guid("e0dba10e-bb43-4879-98bc-74d972f4c134"),
                            QRCode = "TKT028acfbe014"
                        },
                        new
                        {
                            Id = new Guid("62a0a822-04f3-4999-9ddb-7ca0d6d3e2b8"),
                            AttendeeId = new Guid("90f96b7f-f83e-459c-92e2-c5db525dd848"),
                            EventId = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            PaymentId = new Guid("105d555c-0d79-4755-9c2e-63f019ff1e75"),
                            QRCode = "TKTf237b1b6015"
                        },
                        new
                        {
                            Id = new Guid("da5d8d27-68f8-42c2-8970-54b55de4b945"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230016"
                        },
                        new
                        {
                            Id = new Guid("42b70435-9f29-4530-b792-9ffafcf1918c"),
                            EventId = new Guid("b76ab958-6527-41e0-83fe-c8b5a718f498"),
                            QRCode = "TKTb76ab958017"
                        },
                        new
                        {
                            Id = new Guid("1c9c0c0b-c738-4fc5-be8a-8dbf839c329a"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230018"
                        },
                        new
                        {
                            Id = new Guid("145d89f5-f7fd-4378-b12b-d15ee82b0ba0"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230019"
                        },
                        new
                        {
                            Id = new Guid("40b0648e-357e-4886-afbf-3bc535eed9cf"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e020"
                        },
                        new
                        {
                            Id = new Guid("85d62aa4-d47f-4977-95a0-4d6fff861b64"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            QRCode = "TKTfb47d29a021"
                        },
                        new
                        {
                            Id = new Guid("5a90de6a-fb5f-44c7-a87e-9f08414b685f"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            QRCode = "TKTfb47d29a022"
                        },
                        new
                        {
                            Id = new Guid("2817653d-877c-49a2-9cce-fc8953209c07"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230023"
                        },
                        new
                        {
                            Id = new Guid("dd8bd138-5df3-4323-80ea-83afc85e3fd1"),
                            EventId = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            QRCode = "TKT19396e78024"
                        },
                        new
                        {
                            Id = new Guid("23a27055-5380-4c96-a7d3-49ca42615f27"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230025"
                        },
                        new
                        {
                            Id = new Guid("5f8372dc-6a4b-4dca-9823-94d6391a768f"),
                            EventId = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            QRCode = "TKTf237b1b6026"
                        },
                        new
                        {
                            Id = new Guid("ace95d70-ad0d-4855-a39e-0a2c62e56442"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            QRCode = "TKTfb47d29a027"
                        },
                        new
                        {
                            Id = new Guid("ccf51b86-f96e-4866-a76b-dddfe30edad1"),
                            EventId = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            QRCode = "TKT19396e78028"
                        },
                        new
                        {
                            Id = new Guid("384077c5-ccc0-4361-b192-55b6119545a1"),
                            EventId = new Guid("7509cb6d-b5d8-4690-9523-8d0661aea6bf"),
                            QRCode = "TKT7509cb6d029"
                        },
                        new
                        {
                            Id = new Guid("078fa145-26ad-402e-b1b3-d5496da318f2"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            QRCode = "TKTfb47d29a030"
                        },
                        new
                        {
                            Id = new Guid("a188c071-11fc-4192-ae33-e6ae4da2713e"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e031"
                        },
                        new
                        {
                            Id = new Guid("85dc110e-742c-4f52-913c-a831baac124f"),
                            EventId = new Guid("7509cb6d-b5d8-4690-9523-8d0661aea6bf"),
                            QRCode = "TKT7509cb6d032"
                        },
                        new
                        {
                            Id = new Guid("765d9b14-869a-4243-a7e9-1bcfe80eec41"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            QRCode = "TKT028acfbe033"
                        },
                        new
                        {
                            Id = new Guid("52dfc542-33d6-4740-9301-0ffb8a0230cf"),
                            EventId = new Guid("5738ff8a-ed21-49a7-92dc-1b22f6495f10"),
                            QRCode = "TKT5738ff8a034"
                        },
                        new
                        {
                            Id = new Guid("c18c221d-d06e-4c56-825b-64d2f52a55ac"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            QRCode = "TKT028acfbe035"
                        },
                        new
                        {
                            Id = new Guid("fa533050-0659-40f9-b6f5-fe64b1347957"),
                            EventId = new Guid("fb47d29a-7801-4265-83e9-b6c5e5ff212a"),
                            QRCode = "TKTfb47d29a036"
                        },
                        new
                        {
                            Id = new Guid("a8a4358d-fd06-48ec-bc6e-d0b6f9a3d3ba"),
                            EventId = new Guid("b76ab958-6527-41e0-83fe-c8b5a718f498"),
                            QRCode = "TKTb76ab958037"
                        },
                        new
                        {
                            Id = new Guid("1687f405-a8f3-4b3f-96ec-2c02edffcd9f"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e038"
                        },
                        new
                        {
                            Id = new Guid("fba15366-8d9b-4660-a76b-3b4abec437e2"),
                            EventId = new Guid("bab876e3-e298-4dcc-a9f2-30300cca44d0"),
                            QRCode = "TKTbab876e3039"
                        },
                        new
                        {
                            Id = new Guid("87d1aa6e-4c04-4205-898d-da70b7b35b99"),
                            EventId = new Guid("bab876e3-e298-4dcc-a9f2-30300cca44d0"),
                            QRCode = "TKTbab876e3040"
                        },
                        new
                        {
                            Id = new Guid("5fccc21b-a9f8-406b-b80e-5598224a1afe"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e041"
                        },
                        new
                        {
                            Id = new Guid("2cf8d17f-a22a-4c1f-9a90-35cb5c131af6"),
                            EventId = new Guid("f237b1b6-fc64-4ece-866c-0d55ab15a39b"),
                            QRCode = "TKTf237b1b6042"
                        },
                        new
                        {
                            Id = new Guid("e1b6dabd-91dc-4f8c-b297-338be88dcb11"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e043"
                        },
                        new
                        {
                            Id = new Guid("7d9b0bdb-740d-4a25-83b4-dbf2afbbade2"),
                            EventId = new Guid("dee6c230-9a20-488c-8e55-7dfbecd10759"),
                            QRCode = "TKTdee6c230044"
                        },
                        new
                        {
                            Id = new Guid("f6149ebb-de15-4ddd-b472-66b8ebce1c14"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e045"
                        },
                        new
                        {
                            Id = new Guid("518d9020-8af6-477b-ab05-cc643bf538c6"),
                            EventId = new Guid("6819099e-e523-4a87-9d6c-3e888cfda51d"),
                            QRCode = "TKT6819099e046"
                        },
                        new
                        {
                            Id = new Guid("4820b3d8-9d7f-421b-99c2-8e42feeff96b"),
                            EventId = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            QRCode = "TKT19396e78047"
                        },
                        new
                        {
                            Id = new Guid("fef07dda-18ba-401b-bf08-602bc3cdaafe"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            QRCode = "TKT028acfbe048"
                        },
                        new
                        {
                            Id = new Guid("f7ec32ff-f496-437f-b87a-ae09c92714fd"),
                            EventId = new Guid("19396e78-7160-4b9f-af1e-8cfc470504f0"),
                            QRCode = "TKT19396e78049"
                        },
                        new
                        {
                            Id = new Guid("adf9e9d5-402c-4e2b-ae2f-53548ecf1390"),
                            EventId = new Guid("028acfbe-ed39-4885-8288-ba6f8e5def77"),
                            QRCode = "TKT028acfbe050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14c9d9e4-ea9d-43f3-ab4b-c477728a50b0"),
                            BirthDate = new DateTime(1998, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4501),
                            CreatedAt = new DateTime(2025, 4, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("18117f34-3e38-447a-9875-1ee01c34ca2d"),
                            BirthDate = new DateTime(1992, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4511),
                            CreatedAt = new DateTime(2025, 4, 30, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("ecd35ba4-ee88-42d1-9c54-84f8d63d6745"),
                            BirthDate = new DateTime(2004, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4518),
                            CreatedAt = new DateTime(2025, 5, 1, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("3041a3bf-2282-4fe8-9298-c58cb688afc6"),
                            BirthDate = new DateTime(2001, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4522),
                            CreatedAt = new DateTime(2025, 5, 2, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("e6292634-8fc9-4cb0-b247-fcf8a7209901"),
                            BirthDate = new DateTime(2004, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4526),
                            CreatedAt = new DateTime(2025, 5, 3, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("d4c391f1-a40e-4505-8704-262e49db12d3"),
                            BirthDate = new DateTime(1993, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4530),
                            CreatedAt = new DateTime(2025, 5, 4, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("f4c72e94-96a5-46f5-af7f-996c6287326f"),
                            BirthDate = new DateTime(1988, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4533),
                            CreatedAt = new DateTime(2025, 5, 5, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b1316131-b6f0-4706-8dfc-e3f591bb81d8"),
                            BirthDate = new DateTime(1998, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4536),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("e8cd1305-505a-4a2b-8ab6-e2640f0c5e21"),
                            BirthDate = new DateTime(1990, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4539),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c136faa2-b4e1-455c-9f0c-526d0ebc6227"),
                            BirthDate = new DateTime(1999, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4545),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("911f2337-e499-4605-b85e-fcdcfa1ea3dd"),
                            BirthDate = new DateTime(2005, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4550),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("9ac4ca9a-6ace-4550-8804-07cfa8dd4b13"),
                            BirthDate = new DateTime(1995, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4554),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c29d8736-02bc-4627-874d-5665e1aaa60c"),
                            BirthDate = new DateTime(1986, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4589),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("1e46df74-0e6c-48ff-9127-f26fca91e3b4"),
                            BirthDate = new DateTime(1986, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4593),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("89b6d599-13df-47f9-86ad-c3fd3c5c92fe"),
                            BirthDate = new DateTime(1999, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4596),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("1fc49d0a-5f91-4a8d-9cfa-30ae69aa4f22"),
                            BirthDate = new DateTime(2002, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4600),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("49ae2a41-d128-4a25-a0fb-3f9fb9ee8dab"),
                            BirthDate = new DateTime(1995, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4602),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("d9c01f6c-5579-44d0-bc5d-959f2735ecd9"),
                            BirthDate = new DateTime(2005, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4607),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("15180930-7b77-43a1-a477-8ce9451cd0e8"),
                            BirthDate = new DateTime(2005, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4613),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("6660a054-8b40-4a70-9aff-a7596a0b2c2e"),
                            BirthDate = new DateTime(2004, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4616),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("7f90ff26-bcf2-46a5-a69b-3242c14cf27b"),
                            BirthDate = new DateTime(1986, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4623),
                            CreatedAt = new DateTime(2025, 3, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("ed8fe693-e994-4d28-a776-33a761d691b9"),
                            BirthDate = new DateTime(1987, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4628),
                            CreatedAt = new DateTime(2025, 3, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("1de89a86-7695-4371-aa69-f1c0d2e7235d"),
                            BirthDate = new DateTime(1990, 5, 28, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4631),
                            CreatedAt = new DateTime(2025, 3, 29, 19, 0, 33, 791, DateTimeKind.Utc).AddTicks(4311),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
