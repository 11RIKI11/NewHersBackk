// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604191602_12333")]
    partial class _12333
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cadef8d-7f3f-4319-b210-dd18e5d4f100"),
                            BirthDate = new DateTime(2010, 3, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2703),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "712639117",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("ca81a7c6-e917-40bd-8e43-844cf171d05e"),
                            BirthDate = new DateTime(2005, 3, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2711),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4502 651044",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("3e515bea-adf9-4072-83b7-4f1052f2694e"),
                            BirthDate = new DateTime(2004, 12, 2, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2717),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "719731270",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("c802a4dd-8632-4982-a214-03b5e8a9bf98"),
                            BirthDate = new DateTime(2001, 1, 27, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2720),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4504 649023",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("4b43e816-9a4e-4583-b880-0087b6e7021f"),
                            BirthDate = new DateTime(2002, 5, 30, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2722),
                            CreatedAt = new DateTime(2025, 5, 30, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "717412755",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("f9003f12-da74-443b-af0e-ad6c73f3356c"),
                            BirthDate = new DateTime(2002, 3, 24, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2725),
                            CreatedAt = new DateTime(2025, 5, 29, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4506 517734",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("23e1e9be-ed5f-42b7-a815-3e60ef2f8ac1"),
                            BirthDate = new DateTime(2004, 5, 27, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2727),
                            CreatedAt = new DateTime(2025, 5, 28, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "716786490",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("2e46d0c8-d2ea-49ce-b0ca-db58467c0702"),
                            BirthDate = new DateTime(2004, 9, 8, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2729),
                            CreatedAt = new DateTime(2025, 5, 27, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4508 675432",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("7edcc5b0-a4cb-4b2f-9774-318fb86a09da"),
                            BirthDate = new DateTime(2004, 2, 12, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2732),
                            CreatedAt = new DateTime(2025, 5, 26, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "714095294",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("71191de0-323c-4d2a-8888-6dc24b43f3dd"),
                            BirthDate = new DateTime(2009, 11, 30, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2736),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4510 326978",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("ecf5f082-1cef-4e61-95b1-09bffd67a75f"),
                            BirthDate = new DateTime(2004, 5, 2, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2738),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "714296426",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("98ef17d1-4db8-4fcd-82ef-dc53094f53fd"),
                            BirthDate = new DateTime(2009, 12, 29, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2740),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4512 954942",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("bdf0b4fa-7d81-4cf0-b389-046fcadb7ad0"),
                            BirthDate = new DateTime(2008, 10, 15, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2742),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "711590291",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("2feb6272-02ed-4aa1-9d96-96d0258802a7"),
                            BirthDate = new DateTime(2005, 8, 30, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2744),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4514 913452",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("24fc25f1-a3f1-4609-9e77-852034d9c995"),
                            BirthDate = new DateTime(2007, 3, 20, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2746),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "719036696",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("d02fe533-1334-43c6-8205-708780dfc1e5"),
                            BirthDate = new DateTime(2002, 4, 20, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2748),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4516 364497",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("274ee245-2410-4b14-afdd-cb426d65f74f"),
                            BirthDate = new DateTime(2000, 7, 30, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2750),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "719713576",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("d5419b24-fbe2-41cc-81b3-35cb15491d5f"),
                            BirthDate = new DateTime(2003, 2, 14, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2754),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4518 471776",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("4f73ed69-262f-4fe1-aa61-fe8804990366"),
                            BirthDate = new DateTime(2009, 1, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2757),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "711790193",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("ce0e1d8f-fab9-4603-8c28-542dfe5ff2e2"),
                            BirthDate = new DateTime(2007, 6, 17, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2758),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4520 799416",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("47e0c9ba-fc62-4c14-9491-aa861e3c60a5"),
                            BirthDate = new DateTime(2003, 5, 29, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2791),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "714004230",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("fcf2af15-274d-401f-b721-70a099a97851"),
                            BirthDate = new DateTime(2004, 6, 19, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2793),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4522 846230",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("fd404005-d594-4836-aff3-cebe2b802715"),
                            BirthDate = new DateTime(2002, 11, 26, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2796),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "716545259",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("cbb86f95-2424-4124-aed5-98cb3d38b0a1"),
                            BirthDate = new DateTime(2009, 6, 11, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2798),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4524 569031",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("c599b598-22c5-4fec-8600-bcba2699d3be"),
                            BirthDate = new DateTime(2006, 7, 20, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2800),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "718967126",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("854b32fd-a47f-4ef7-832b-3d8500fb8985"),
                            BirthDate = new DateTime(2008, 8, 13, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2804),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4526 443095",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("0995891b-614e-43e1-a172-a771e73839cb"),
                            BirthDate = new DateTime(2009, 8, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2806),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "717536960",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("46c19f41-5c53-45fe-91cb-4c8d7474fe30"),
                            BirthDate = new DateTime(2003, 9, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2808),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4528 907094",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("fe247990-283a-4e08-ad73-7cde772efe8d"),
                            BirthDate = new DateTime(2006, 3, 26, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2810),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "717963655",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("1ed2ea21-d581-41c5-a08b-b9ca21bc7e1f"),
                            BirthDate = new DateTime(2003, 1, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2812),
                            CreatedAt = new DateTime(2025, 5, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            DocumentNumber = "4530 443933",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1895b760-8e8f-416f-a8d4-afe9412499e9"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 6, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("9b46e98d-244e-4f9e-bc77-29cdfb94a7f6"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 6, 6, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("f797d8eb-2037-4c85-beb1-7d0053e14ac2"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 6, 7, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 6, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 8, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 8, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 9, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 9, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 10, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("5d8434b7-bb1c-4149-a7da-658c3dd48d00"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 11, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 11, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("99a34d42-63aa-4cdd-bcc4-863897267e5e"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 12, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 13, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("260ec64f-91e7-4b35-bf08-f5bf4de6ddc1"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 14, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 14, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfb3e145-2180-4d68-ba5f-5e910944e9b5"),
                            Amount = 3600m,
                            BuyerId = new Guid("815fef11-b07b-4271-b147-52f95f5a6979"),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 5, 31, 19, 42, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/cfb3e145-2180-4d68-ba5f-5e910944e9b5",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("b591f530-faea-4282-aeb0-16a2cd6f96bb"),
                            Amount = 4000m,
                            BuyerId = new Guid("edc8395c-356f-4dc5-b31c-fa0b1b68f77b"),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 1, 19, 45, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/b591f530-faea-4282-aeb0-16a2cd6f96bb",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("f9724cdf-18d4-4a42-aeab-b67233d9685e"),
                            Amount = 5600m,
                            BuyerId = new Guid("a14af542-971b-4264-ba89-245768b92ba3"),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 2, 19, 28, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/f9724cdf-18d4-4a42-aeab-b67233d9685e",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("81e81771-7d5f-4891-a552-ab8eb383c468"),
                            Amount = 5200m,
                            BuyerId = new Guid("ca93601e-153c-4075-b94a-d08784a9dd0b"),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 3, 19, 31, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/81e81771-7d5f-4891-a552-ab8eb383c468",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("bd2370e4-b94a-40fd-b7ab-705d757e2d94"),
                            Amount = 2800m,
                            BuyerId = new Guid("07dfe6ea-da77-4e66-bdb0-3acd994baf56"),
                            CreatedAt = new DateTime(2025, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 4, 19, 28, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/bd2370e4-b94a-40fd-b7ab-705d757e2d94",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("fa9853b9-3ce9-44c4-a2dc-63c610db3a13"),
                            Amount = 4200m,
                            BuyerId = new Guid("eedd0eeb-e3f3-4eaa-8a3b-9deb25c3dffe"),
                            CreatedAt = new DateTime(2025, 6, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 5, 19, 36, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/fa9853b9-3ce9-44c4-a2dc-63c610db3a13",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("60cd8b4c-1d34-4a4f-b2cb-47b14dda7b17"),
                            Amount = 2400m,
                            BuyerId = new Guid("5a491842-01d3-4f7f-9a8c-a54f761919d9"),
                            CreatedAt = new DateTime(2025, 6, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 6, 19, 22, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/60cd8b4c-1d34-4a4f-b2cb-47b14dda7b17",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("13455571-2c41-42c6-bf02-6d25d5e7be40"),
                            Amount = 2600m,
                            BuyerId = new Guid("c70c795c-29a2-45cb-9945-88ccf7c2af2c"),
                            CreatedAt = new DateTime(2025, 6, 7, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 7, 19, 37, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/13455571-2c41-42c6-bf02-6d25d5e7be40",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("5e1d8478-38ce-4220-81e1-69a473baf6b1"),
                            Amount = 0m,
                            BuyerId = new Guid("c70c795c-29a2-45cb-9945-88ccf7c2af2c"),
                            CreatedAt = new DateTime(2025, 6, 8, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 8, 19, 42, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/5e1d8478-38ce-4220-81e1-69a473baf6b1",
                            Status = "Successed"
                        },
                        new
                        {
                            Id = new Guid("d6a892f1-08b2-4a00-8994-737fc885b31b"),
                            Amount = 0m,
                            BuyerId = new Guid("131bd270-b325-4155-bcc3-9ab8c68d3c55"),
                            CreatedAt = new DateTime(2025, 6, 9, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            PaidAt = new DateTime(2025, 6, 9, 19, 45, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            QrUrl = "https://payment.example.com/d6a892f1-08b2-4a00-8994-737fc885b31b",
                            Status = "Successed"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fe5a4c9-c4e2-4c50-87b1-9235af7aa849"),
                            AttendeeId = new Guid("bdf0b4fa-7d81-4cf0-b389-046fcadb7ad0"),
                            EventId = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            PaymentId = new Guid("cfb3e145-2180-4d68-ba5f-5e910944e9b5"),
                            QRCode = "TKT4b8a65ad001"
                        },
                        new
                        {
                            Id = new Guid("d3c2a5dc-8249-4b6c-8ecb-4d1e36e44961"),
                            AttendeeId = new Guid("0995891b-614e-43e1-a172-a771e73839cb"),
                            EventId = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            PaymentId = new Guid("cfb3e145-2180-4d68-ba5f-5e910944e9b5"),
                            QRCode = "TKT7b959a7d002"
                        },
                        new
                        {
                            Id = new Guid("fc9aec6a-ec03-4bb7-b81f-69d170713b93"),
                            AttendeeId = new Guid("98ef17d1-4db8-4fcd-82ef-dc53094f53fd"),
                            EventId = new Guid("99a34d42-63aa-4cdd-bcc4-863897267e5e"),
                            PaymentId = new Guid("b591f530-faea-4282-aeb0-16a2cd6f96bb"),
                            QRCode = "TKT99a34d42003"
                        },
                        new
                        {
                            Id = new Guid("f994a44d-47e9-48e8-9253-69646d557b97"),
                            AttendeeId = new Guid("854b32fd-a47f-4ef7-832b-3d8500fb8985"),
                            EventId = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            PaymentId = new Guid("b591f530-faea-4282-aeb0-16a2cd6f96bb"),
                            QRCode = "TKT7b959a7d004"
                        },
                        new
                        {
                            Id = new Guid("7f70308e-983a-483c-9c46-d63dba685e27"),
                            AttendeeId = new Guid("cbb86f95-2424-4124-aed5-98cb3d38b0a1"),
                            EventId = new Guid("260ec64f-91e7-4b35-bf08-f5bf4de6ddc1"),
                            PaymentId = new Guid("f9724cdf-18d4-4a42-aeab-b67233d9685e"),
                            QRCode = "TKT260ec64f005"
                        },
                        new
                        {
                            Id = new Guid("bc02825e-f519-4281-ab4e-b0068374b970"),
                            AttendeeId = new Guid("7edcc5b0-a4cb-4b2f-9774-318fb86a09da"),
                            EventId = new Guid("260ec64f-91e7-4b35-bf08-f5bf4de6ddc1"),
                            PaymentId = new Guid("f9724cdf-18d4-4a42-aeab-b67233d9685e"),
                            QRCode = "TKT260ec64f006"
                        },
                        new
                        {
                            Id = new Guid("31fd6079-1685-4a9d-8f7d-e64fee5051bc"),
                            AttendeeId = new Guid("4b43e816-9a4e-4583-b880-0087b6e7021f"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            PaymentId = new Guid("81e81771-7d5f-4891-a552-ab8eb383c468"),
                            QRCode = "TKTabaac915007"
                        },
                        new
                        {
                            Id = new Guid("0112708d-d10c-41a5-b493-04975d873f3d"),
                            AttendeeId = new Guid("274ee245-2410-4b14-afdd-cb426d65f74f"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            PaymentId = new Guid("81e81771-7d5f-4891-a552-ab8eb383c468"),
                            QRCode = "TKTabaac915008"
                        },
                        new
                        {
                            Id = new Guid("871f8838-a1a8-4bf6-ba92-5aa92283d27c"),
                            AttendeeId = new Guid("3e515bea-adf9-4072-83b7-4f1052f2694e"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            PaymentId = new Guid("bd2370e4-b94a-40fd-b7ab-705d757e2d94"),
                            QRCode = "TKT66c9086a009"
                        },
                        new
                        {
                            Id = new Guid("8b3f5296-6c65-47c9-ad58-d2f045d4cf95"),
                            AttendeeId = new Guid("4f73ed69-262f-4fe1-aa61-fe8804990366"),
                            EventId = new Guid("1895b760-8e8f-416f-a8d4-afe9412499e9"),
                            PaymentId = new Guid("bd2370e4-b94a-40fd-b7ab-705d757e2d94"),
                            QRCode = "TKT1895b760010"
                        },
                        new
                        {
                            Id = new Guid("aa694f70-0041-4bc1-b997-3139132127ba"),
                            AttendeeId = new Guid("2e46d0c8-d2ea-49ce-b0ca-db58467c0702"),
                            EventId = new Guid("5d8434b7-bb1c-4149-a7da-658c3dd48d00"),
                            PaymentId = new Guid("fa9853b9-3ce9-44c4-a2dc-63c610db3a13"),
                            QRCode = "TKT5d8434b7011"
                        },
                        new
                        {
                            Id = new Guid("9f35ce12-96f1-4cf7-a9ae-b982f3e7223d"),
                            AttendeeId = new Guid("f9003f12-da74-443b-af0e-ad6c73f3356c"),
                            EventId = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            PaymentId = new Guid("fa9853b9-3ce9-44c4-a2dc-63c610db3a13"),
                            QRCode = "TKT4b8a65ad012"
                        },
                        new
                        {
                            Id = new Guid("fd90256e-f621-49a1-b387-c03237eb3065"),
                            AttendeeId = new Guid("23e1e9be-ed5f-42b7-a815-3e60ef2f8ac1"),
                            EventId = new Guid("f797d8eb-2037-4c85-beb1-7d0053e14ac2"),
                            PaymentId = new Guid("60cd8b4c-1d34-4a4f-b2cb-47b14dda7b17"),
                            QRCode = "TKTf797d8eb013"
                        },
                        new
                        {
                            Id = new Guid("149f5eea-bbdb-4627-9a44-457828133dd0"),
                            AttendeeId = new Guid("fcf2af15-274d-401f-b721-70a099a97851"),
                            EventId = new Guid("1895b760-8e8f-416f-a8d4-afe9412499e9"),
                            PaymentId = new Guid("60cd8b4c-1d34-4a4f-b2cb-47b14dda7b17"),
                            QRCode = "TKT1895b760014"
                        },
                        new
                        {
                            Id = new Guid("0fa4dfc3-6836-4a4e-a5f1-c46890a1b625"),
                            AttendeeId = new Guid("274ee245-2410-4b14-afdd-cb426d65f74f"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            PaymentId = new Guid("13455571-2c41-42c6-bf02-6d25d5e7be40"),
                            QRCode = "TKTabaac915015"
                        },
                        new
                        {
                            Id = new Guid("dfc3f23f-75db-41e6-bbad-8227817a8f5c"),
                            EventId = new Guid("99a34d42-63aa-4cdd-bcc4-863897267e5e"),
                            QRCode = "TKT99a34d42016"
                        },
                        new
                        {
                            Id = new Guid("6808384b-db25-460e-9a25-f0a1a1e20bf6"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            QRCode = "TKT66c9086a017"
                        },
                        new
                        {
                            Id = new Guid("8a0ebcde-98a6-419a-ad0c-ef91c985edcc"),
                            EventId = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            QRCode = "TKT7b959a7d018"
                        },
                        new
                        {
                            Id = new Guid("c60c6a2a-43a6-4bb7-9383-f8e9142130dc"),
                            EventId = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            QRCode = "TKT7b959a7d019"
                        },
                        new
                        {
                            Id = new Guid("72689d6f-2958-4ea3-91d1-7f1679c37ba4"),
                            EventId = new Guid("5d8434b7-bb1c-4149-a7da-658c3dd48d00"),
                            QRCode = "TKT5d8434b7020"
                        },
                        new
                        {
                            Id = new Guid("5942dde4-ff81-44ac-a36a-0da2fd391119"),
                            EventId = new Guid("9b46e98d-244e-4f9e-bc77-29cdfb94a7f6"),
                            QRCode = "TKT9b46e98d021"
                        },
                        new
                        {
                            Id = new Guid("d41a4505-5c39-46c0-9f9c-e938ef4c32a9"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            QRCode = "TKT66c9086a022"
                        },
                        new
                        {
                            Id = new Guid("71b87b17-1f9a-4447-8bc2-fc3c8aab7570"),
                            EventId = new Guid("5d8434b7-bb1c-4149-a7da-658c3dd48d00"),
                            QRCode = "TKT5d8434b7023"
                        },
                        new
                        {
                            Id = new Guid("e2d020a5-2140-4f5b-931e-740e48845e5b"),
                            EventId = new Guid("1895b760-8e8f-416f-a8d4-afe9412499e9"),
                            QRCode = "TKT1895b760024"
                        },
                        new
                        {
                            Id = new Guid("66cfcfb9-b785-4267-8d33-f2bdf7cf0805"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            QRCode = "TKT66c9086a025"
                        },
                        new
                        {
                            Id = new Guid("f2f5224f-534e-4ea0-a651-ca3afb377300"),
                            EventId = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            QRCode = "TKT4b8a65ad026"
                        },
                        new
                        {
                            Id = new Guid("f6a984b4-44be-41bb-8d33-d1fee8427889"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915027"
                        },
                        new
                        {
                            Id = new Guid("45b98a36-6c92-4930-991e-b8b80e211911"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            QRCode = "TKT66c9086a028"
                        },
                        new
                        {
                            Id = new Guid("05782f3e-28a5-4e44-91e6-5ff4d39a8eaa"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915029"
                        },
                        new
                        {
                            Id = new Guid("071224b2-23f9-4c0b-b7ab-502e48faf187"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915030"
                        },
                        new
                        {
                            Id = new Guid("011d3e1f-c18b-4ded-a847-e83d5a0ba52e"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915031"
                        },
                        new
                        {
                            Id = new Guid("055be2e9-daa0-416f-b1bb-619142532d77"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915032"
                        },
                        new
                        {
                            Id = new Guid("ebf6828a-39fd-4c7a-a2fb-ffe2905122f0"),
                            EventId = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            QRCode = "TKT4b8a65ad033"
                        },
                        new
                        {
                            Id = new Guid("c39585a0-0a84-4d99-8c46-b98ff17d7ad9"),
                            EventId = new Guid("99a34d42-63aa-4cdd-bcc4-863897267e5e"),
                            QRCode = "TKT99a34d42034"
                        },
                        new
                        {
                            Id = new Guid("72924fbe-2ed3-456b-82b4-663347443fd6"),
                            EventId = new Guid("5d8434b7-bb1c-4149-a7da-658c3dd48d00"),
                            QRCode = "TKT5d8434b7035"
                        },
                        new
                        {
                            Id = new Guid("7704b78f-3ac4-4fa2-ad11-245bea39ba62"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915036"
                        },
                        new
                        {
                            Id = new Guid("31f514fd-ff03-4bcb-a87c-6693ad4be968"),
                            EventId = new Guid("260ec64f-91e7-4b35-bf08-f5bf4de6ddc1"),
                            QRCode = "TKT260ec64f037"
                        },
                        new
                        {
                            Id = new Guid("04385478-5624-49b9-898d-fc75c99ebaf7"),
                            EventId = new Guid("f797d8eb-2037-4c85-beb1-7d0053e14ac2"),
                            QRCode = "TKTf797d8eb038"
                        },
                        new
                        {
                            Id = new Guid("746ef25b-f374-428a-a6fa-90ac462bef8b"),
                            EventId = new Guid("99a34d42-63aa-4cdd-bcc4-863897267e5e"),
                            QRCode = "TKT99a34d42039"
                        },
                        new
                        {
                            Id = new Guid("44714669-69a0-440c-b02a-523ba6e573c1"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915040"
                        },
                        new
                        {
                            Id = new Guid("2018dd8d-9d1f-4ca9-bcc1-cd30137e3393"),
                            EventId = new Guid("66c9086a-d63d-4019-88b0-5a3686fa9368"),
                            QRCode = "TKT66c9086a041"
                        },
                        new
                        {
                            Id = new Guid("0ce48688-19c0-4626-a743-783fac91270d"),
                            EventId = new Guid("1895b760-8e8f-416f-a8d4-afe9412499e9"),
                            QRCode = "TKT1895b760042"
                        },
                        new
                        {
                            Id = new Guid("d0779c2f-d88e-496c-8a8b-183601eb12dc"),
                            EventId = new Guid("4b8a65ad-f937-4b5d-b01d-e8afef6bf9d1"),
                            QRCode = "TKT4b8a65ad043"
                        },
                        new
                        {
                            Id = new Guid("4d5f1971-0482-41b4-886d-11cd2cc02385"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915044"
                        },
                        new
                        {
                            Id = new Guid("e8c868cc-0a93-471d-8dd1-ab2a3fd484f9"),
                            EventId = new Guid("7b959a7d-5af4-428e-b8bc-f7fbaf591d6f"),
                            QRCode = "TKT7b959a7d045"
                        },
                        new
                        {
                            Id = new Guid("9b9acf09-aa81-435f-a272-847c0cd2b702"),
                            EventId = new Guid("f797d8eb-2037-4c85-beb1-7d0053e14ac2"),
                            QRCode = "TKTf797d8eb046"
                        },
                        new
                        {
                            Id = new Guid("d0f350c4-43cc-4738-8112-4bfb0c33b996"),
                            EventId = new Guid("9b46e98d-244e-4f9e-bc77-29cdfb94a7f6"),
                            QRCode = "TKT9b46e98d047"
                        },
                        new
                        {
                            Id = new Guid("98b32c8e-3c36-47b3-92b7-0e3e6cd81edc"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915048"
                        },
                        new
                        {
                            Id = new Guid("4a551b63-7d01-4b69-b57c-212c80012505"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915049"
                        },
                        new
                        {
                            Id = new Guid("addd84e6-cf73-4c97-bb1d-6055e85df217"),
                            EventId = new Guid("abaac915-8dc6-4076-8aa5-4237bf5ed5de"),
                            QRCode = "TKTabaac915050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca93601e-153c-4075-b94a-d08784a9dd0b"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2600),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("666231b5-9e8f-464c-a84e-989068737a63"),
                            BirthDate = new DateTime(1992, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2607),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("edc8395c-356f-4dc5-b31c-fa0b1b68f77b"),
                            BirthDate = new DateTime(1992, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2611),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5d5ad9ed-b6dc-40a7-9912-9fce931c2795"),
                            BirthDate = new DateTime(1986, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2614),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("56f9208c-b737-45e5-8d39-cf73a365b979"),
                            BirthDate = new DateTime(1999, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2616),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("24428495-59ee-4cbb-a7c1-0580cc34a572"),
                            BirthDate = new DateTime(1996, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2619),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("eedd0eeb-e3f3-4eaa-8a3b-9deb25c3dffe"),
                            BirthDate = new DateTime(2005, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2622),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5a491842-01d3-4f7f-9a8c-a54f761919d9"),
                            BirthDate = new DateTime(1990, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2624),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("612473c2-e441-4c97-876c-73890f3ba21d"),
                            BirthDate = new DateTime(2001, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2627),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5b83deb9-dd09-46d2-a5fe-26f436c3e606"),
                            BirthDate = new DateTime(2004, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2660),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("131bd270-b325-4155-bcc3-9ab8c68d3c55"),
                            BirthDate = new DateTime(2000, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2662),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("58a8e619-4392-4e97-b346-866d00e406b5"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2665),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("815fef11-b07b-4271-b147-52f95f5a6979"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2668),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("6f00a591-87a4-4631-8e35-152883a20aff"),
                            BirthDate = new DateTime(2000, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2670),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("e189950c-9fda-43a5-aeff-1d7621397d21"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2673),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("a14af542-971b-4264-ba89-245768b92ba3"),
                            BirthDate = new DateTime(2003, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2675),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("07dfe6ea-da77-4e66-bdb0-3acd994baf56"),
                            BirthDate = new DateTime(1988, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2679),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c70c795c-29a2-45cb-9945-88ccf7c2af2c"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2682),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("567c8878-1007-4499-ad2f-fb17de788453"),
                            BirthDate = new DateTime(1986, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2684),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2f69efc0-162c-41c7-9d4d-7ef2d5a2b7b8"),
                            BirthDate = new DateTime(1990, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2686),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("4f60a808-c2e3-4960-bb3e-09af62a9c3fb"),
                            BirthDate = new DateTime(1992, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2692),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("cdc990a7-97c6-423a-bdcf-cb32a3d68a0b"),
                            BirthDate = new DateTime(1991, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2695),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("c9320086-7c62-48fb-bde7-c6400bf157df"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2698),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 16, 1, 851, DateTimeKind.Utc).AddTicks(2420),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
