// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604191338_1233")]
    partial class _1233
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c95acc92-2bbd-43a3-ac91-e4ef5b5fe6ff"),
                            BirthDate = new DateTime(2006, 11, 10, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(814),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "719178501",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("8893e5ef-2fd9-4d51-a4eb-f20b80b3e216"),
                            BirthDate = new DateTime(2010, 1, 15, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(820),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4502 564780",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("f438b181-552c-4dc0-98ae-b7e983f185ef"),
                            BirthDate = new DateTime(2003, 1, 18, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(826),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "718724704",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("f9480a53-a416-4b67-a6e0-6ab459d51c03"),
                            BirthDate = new DateTime(2007, 11, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(828),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4504 567067",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("15bf03b9-ab8f-4d81-8265-ab2e9233afcf"),
                            BirthDate = new DateTime(2008, 6, 2, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(830),
                            CreatedAt = new DateTime(2025, 5, 30, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "715975171",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("ff2adcda-a058-41f0-9baa-28f7f8f1cbd4"),
                            BirthDate = new DateTime(2002, 3, 10, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(856),
                            CreatedAt = new DateTime(2025, 5, 29, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4506 982661",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("f13eb4fd-81ed-40f4-abde-7da44aff2a56"),
                            BirthDate = new DateTime(2008, 7, 11, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(859),
                            CreatedAt = new DateTime(2025, 5, 28, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "717410183",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("389591af-b9d7-43c8-bdec-896ac36d2eb0"),
                            BirthDate = new DateTime(2005, 7, 24, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(861),
                            CreatedAt = new DateTime(2025, 5, 27, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4508 832621",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("6e5d241f-5413-4814-bec0-b0427dffeb5a"),
                            BirthDate = new DateTime(2007, 8, 26, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(864),
                            CreatedAt = new DateTime(2025, 5, 26, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "717249538",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("954cbb4b-bbd2-47d2-b926-9b4f5e6b62d0"),
                            BirthDate = new DateTime(2005, 11, 29, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(867),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4510 817704",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("9d72cf41-47dc-4e31-bbb5-06d493556666"),
                            BirthDate = new DateTime(2000, 7, 18, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(870),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "718378852",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("6ac3c075-68e6-4a1f-a854-892f03692817"),
                            BirthDate = new DateTime(2006, 4, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(872),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4512 932664",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("ff77acfe-1325-44ae-ae04-eb7875e49512"),
                            BirthDate = new DateTime(2006, 1, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(874),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "718962160",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("03e1a482-b58d-45a2-b571-c50e267618fe"),
                            BirthDate = new DateTime(2007, 12, 16, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(876),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4514 128849",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("dc11cc26-e62e-42aa-b3de-50855e3a9a90"),
                            BirthDate = new DateTime(2003, 10, 27, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(878),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "716732915",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("8bae5991-1011-4cab-8d7c-989ebc224c39"),
                            BirthDate = new DateTime(2005, 7, 9, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(879),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4516 913320",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("c18cfc79-f81d-41cb-a02c-a572fb01d853"),
                            BirthDate = new DateTime(2004, 9, 22, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(883),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "718992638",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("dbd1fd79-95a3-40c2-a0f9-5295b812b821"),
                            BirthDate = new DateTime(2000, 12, 10, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(885),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4518 665510",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("658efa95-b3a2-4fca-8190-e3c7ce7b45c9"),
                            BirthDate = new DateTime(2001, 6, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(888),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "719358621",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("65b30bd9-f82d-4211-9586-7ddc0f1f2419"),
                            BirthDate = new DateTime(2004, 8, 24, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(889),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4520 537336",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("0de26d5a-7042-4d1c-96de-f563adb734f8"),
                            BirthDate = new DateTime(2008, 9, 14, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(891),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "714190626",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("a69bb00b-bfec-479e-9e2e-24e15ee34132"),
                            BirthDate = new DateTime(2009, 3, 3, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(893),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4522 934584",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("8761e8e0-9efb-4d39-8f46-483aad1c6ff3"),
                            BirthDate = new DateTime(2003, 5, 31, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(895),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "714882101",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("fd04c6a7-dddc-4637-94d0-83c45374cd1f"),
                            BirthDate = new DateTime(2000, 10, 31, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(896),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4524 807935",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("821e5926-807a-4f7c-a02e-35262de53af2"),
                            BirthDate = new DateTime(2005, 6, 19, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(900),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "714836293",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("53846a4b-07e9-48cc-bf49-687332343b05"),
                            BirthDate = new DateTime(2002, 1, 13, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(901),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4526 416486",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("364b98bd-08d1-4108-a660-ac8984473ffa"),
                            BirthDate = new DateTime(2008, 11, 22, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(903),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "714361187",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("a9a53705-a2fe-4942-bdd3-f22aaf5c8012"),
                            BirthDate = new DateTime(2005, 9, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(905),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4528 712788",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("74b37f82-a91a-4078-8439-691f4304370e"),
                            BirthDate = new DateTime(2005, 3, 14, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(906),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "715525940",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("f8a8351e-b04d-4a62-9939-3b099de1d21f"),
                            BirthDate = new DateTime(2008, 4, 29, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(908),
                            CreatedAt = new DateTime(2025, 5, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            DocumentNumber = "4530 817935",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 6, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("51d7d7b0-018e-425b-b3c0-ba3de86b72b9"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 6, 6, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("c31f0086-5ef7-41de-beb6-3ba4c4aa2ef6"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 6, 7, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 6, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("891e1158-4b5d-4a11-8454-f7f91916305d"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 8, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 8, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 9, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 9, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("bd6a4daf-5c80-406e-82ea-da51cd180a58"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 10, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("6dbaf1f4-3402-43a5-a786-0e2b17547549"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 11, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 11, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 12, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 13, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 14, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 14, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b553dac7-68ea-4e12-8b1d-cc55d4da6a40"),
                            Amount = 3200m,
                            BuyerId = new Guid("d42da656-c6ec-4e36-a4b6-a1597304a420"),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 5, 31, 19, 21, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/b553dac7-68ea-4e12-8b1d-cc55d4da6a40",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("a7b7ec2c-6ad7-47e2-95c7-e7cfee8ee8ff"),
                            Amount = 4000m,
                            BuyerId = new Guid("0e2dd9ef-5fb2-4600-a1b0-019cb106d456"),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 1, 19, 20, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/a7b7ec2c-6ad7-47e2-95c7-e7cfee8ee8ff",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("dcd07571-e1da-4982-b481-7db65e65f948"),
                            Amount = 3600m,
                            BuyerId = new Guid("635b38fb-f0ab-4d09-a4a5-b786097ad81a"),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 2, 19, 29, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/dcd07571-e1da-4982-b481-7db65e65f948",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("23d49ac6-3404-465d-962c-a8de24baadea"),
                            Amount = 3600m,
                            BuyerId = new Guid("9575573f-ec32-4333-b9eb-ea1d3438d585"),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 3, 19, 24, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/23d49ac6-3404-465d-962c-a8de24baadea",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("1c295207-5784-4a66-a7e9-299d94ec23ce"),
                            Amount = 4800m,
                            BuyerId = new Guid("48151ce6-0227-4901-8415-2443f641be7e"),
                            CreatedAt = new DateTime(2025, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 4, 19, 37, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/1c295207-5784-4a66-a7e9-299d94ec23ce",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("382a8cf6-824d-41eb-b5ba-c28d48a6014c"),
                            Amount = 3200m,
                            BuyerId = new Guid("594539ca-4134-420e-ad5a-adfdfed0c907"),
                            CreatedAt = new DateTime(2025, 6, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 5, 19, 20, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/382a8cf6-824d-41eb-b5ba-c28d48a6014c",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("261a049f-e788-4ff9-ad3b-c5e1041d7511"),
                            Amount = 4000m,
                            BuyerId = new Guid("fb253bb0-19c6-41fc-86cc-f79d397ecd1a"),
                            CreatedAt = new DateTime(2025, 6, 6, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 6, 19, 34, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/261a049f-e788-4ff9-ad3b-c5e1041d7511",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("949b5664-f2f2-4deb-a09e-b3a208bf881f"),
                            Amount = 1000m,
                            BuyerId = new Guid("9575573f-ec32-4333-b9eb-ea1d3438d585"),
                            CreatedAt = new DateTime(2025, 6, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 7, 19, 22, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/949b5664-f2f2-4deb-a09e-b3a208bf881f",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("62479253-fb3e-4afe-9806-17a874350c23"),
                            Amount = 0m,
                            BuyerId = new Guid("b0e21802-791b-4b15-a9c3-163d851d3fa7"),
                            CreatedAt = new DateTime(2025, 6, 8, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 8, 19, 22, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/62479253-fb3e-4afe-9806-17a874350c23",
                            Status = "success"
                        },
                        new
                        {
                            Id = new Guid("56c2b856-1039-4948-9c04-7b54bd023de5"),
                            Amount = 0m,
                            BuyerId = new Guid("b904da78-05b6-401a-b638-ea188db61b2a"),
                            CreatedAt = new DateTime(2025, 6, 9, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            PaidAt = new DateTime(2025, 6, 9, 19, 25, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            QrUrl = "https://payment.example.com/56c2b856-1039-4948-9c04-7b54bd023de5",
                            Status = "success"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab704076-6b5a-42f9-bf07-a4723357a3aa"),
                            AttendeeId = new Guid("65b30bd9-f82d-4211-9586-7ddc0f1f2419"),
                            EventId = new Guid("891e1158-4b5d-4a11-8454-f7f91916305d"),
                            PaymentId = new Guid("b553dac7-68ea-4e12-8b1d-cc55d4da6a40"),
                            QRCode = "TKT891e1158001"
                        },
                        new
                        {
                            Id = new Guid("6968b120-ef23-464d-8404-8f0c33bfce62"),
                            AttendeeId = new Guid("a9a53705-a2fe-4942-bdd3-f22aaf5c8012"),
                            EventId = new Guid("891e1158-4b5d-4a11-8454-f7f91916305d"),
                            PaymentId = new Guid("b553dac7-68ea-4e12-8b1d-cc55d4da6a40"),
                            QRCode = "TKT891e1158002"
                        },
                        new
                        {
                            Id = new Guid("78071ef7-6cc3-48a9-8a27-d44f2f6d8c81"),
                            AttendeeId = new Guid("9d72cf41-47dc-4e31-bbb5-06d493556666"),
                            EventId = new Guid("c31f0086-5ef7-41de-beb6-3ba4c4aa2ef6"),
                            PaymentId = new Guid("a7b7ec2c-6ad7-47e2-95c7-e7cfee8ee8ff"),
                            QRCode = "TKTc31f0086003"
                        },
                        new
                        {
                            Id = new Guid("136675d4-dd1b-40d6-8feb-1e04d72be0df"),
                            AttendeeId = new Guid("6ac3c075-68e6-4a1f-a854-892f03692817"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            PaymentId = new Guid("a7b7ec2c-6ad7-47e2-95c7-e7cfee8ee8ff"),
                            QRCode = "TKTfac64f8f004"
                        },
                        new
                        {
                            Id = new Guid("4a58cb01-b357-4c0e-b78e-224b5d6a795b"),
                            AttendeeId = new Guid("0de26d5a-7042-4d1c-96de-f563adb734f8"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            PaymentId = new Guid("dcd07571-e1da-4982-b481-7db65e65f948"),
                            QRCode = "TKT63687531005"
                        },
                        new
                        {
                            Id = new Guid("81b89d1f-ab6e-447b-9231-8f97a8f0869c"),
                            AttendeeId = new Guid("f9480a53-a416-4b67-a6e0-6ab459d51c03"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            PaymentId = new Guid("dcd07571-e1da-4982-b481-7db65e65f948"),
                            QRCode = "TKTfac64f8f006"
                        },
                        new
                        {
                            Id = new Guid("54688448-16b3-43c4-9757-436dedb3b970"),
                            AttendeeId = new Guid("dbd1fd79-95a3-40c2-a0f9-5295b812b821"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            PaymentId = new Guid("23d49ac6-3404-465d-962c-a8de24baadea"),
                            QRCode = "TKTecce423d007"
                        },
                        new
                        {
                            Id = new Guid("5e22b11f-3c92-4e06-a786-2f4630bcb1a0"),
                            AttendeeId = new Guid("c95acc92-2bbd-43a3-ac91-e4ef5b5fe6ff"),
                            EventId = new Guid("51d7d7b0-018e-425b-b3c0-ba3de86b72b9"),
                            PaymentId = new Guid("23d49ac6-3404-465d-962c-a8de24baadea"),
                            QRCode = "TKT51d7d7b0008"
                        },
                        new
                        {
                            Id = new Guid("75e7ec2e-6209-4a0d-9239-2370a597098e"),
                            AttendeeId = new Guid("f9480a53-a416-4b67-a6e0-6ab459d51c03"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            PaymentId = new Guid("1c295207-5784-4a66-a7e9-299d94ec23ce"),
                            QRCode = "TKTecce423d009"
                        },
                        new
                        {
                            Id = new Guid("84a0f983-3bde-4474-9991-16f5523bf874"),
                            AttendeeId = new Guid("f8a8351e-b04d-4a62-9939-3b099de1d21f"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            PaymentId = new Guid("1c295207-5784-4a66-a7e9-299d94ec23ce"),
                            QRCode = "TKTecce423d010"
                        },
                        new
                        {
                            Id = new Guid("b5c71ebe-c0f8-4c18-8c3b-edddb605042d"),
                            AttendeeId = new Guid("c18cfc79-f81d-41cb-a02c-a572fb01d853"),
                            EventId = new Guid("bd6a4daf-5c80-406e-82ea-da51cd180a58"),
                            PaymentId = new Guid("382a8cf6-824d-41eb-b5ba-c28d48a6014c"),
                            QRCode = "TKTbd6a4daf011"
                        },
                        new
                        {
                            Id = new Guid("9716d61a-beca-4cbc-bded-140a96eeac6e"),
                            AttendeeId = new Guid("8bae5991-1011-4cab-8d7c-989ebc224c39"),
                            EventId = new Guid("51d7d7b0-018e-425b-b3c0-ba3de86b72b9"),
                            PaymentId = new Guid("382a8cf6-824d-41eb-b5ba-c28d48a6014c"),
                            QRCode = "TKT51d7d7b0012"
                        },
                        new
                        {
                            Id = new Guid("8671ad7a-0e49-4a67-8305-10d8c11ef2ac"),
                            AttendeeId = new Guid("c18cfc79-f81d-41cb-a02c-a572fb01d853"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            PaymentId = new Guid("261a049f-e788-4ff9-ad3b-c5e1041d7511"),
                            QRCode = "TKTfac64f8f013"
                        },
                        new
                        {
                            Id = new Guid("4427c196-9e9c-4359-8faa-287502a6d6b7"),
                            AttendeeId = new Guid("954cbb4b-bbd2-47d2-b926-9b4f5e6b62d0"),
                            EventId = new Guid("c31f0086-5ef7-41de-beb6-3ba4c4aa2ef6"),
                            PaymentId = new Guid("261a049f-e788-4ff9-ad3b-c5e1041d7511"),
                            QRCode = "TKTc31f0086014"
                        },
                        new
                        {
                            Id = new Guid("b09792c0-82d6-4512-a819-08c3722bb9cd"),
                            AttendeeId = new Guid("6ac3c075-68e6-4a1f-a854-892f03692817"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            PaymentId = new Guid("949b5664-f2f2-4deb-a09e-b3a208bf881f"),
                            QRCode = "TKT63687531015"
                        },
                        new
                        {
                            Id = new Guid("0326cc13-ca2f-4b38-a3e4-d255e1f9f438"),
                            EventId = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            QRCode = "TKT9f3bf734016"
                        },
                        new
                        {
                            Id = new Guid("ee5de988-535c-457d-8b9e-9a28f331801c"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            QRCode = "TKTecce423d017"
                        },
                        new
                        {
                            Id = new Guid("45f3e09b-585a-47e4-859b-b69907a5a092"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd018"
                        },
                        new
                        {
                            Id = new Guid("3fd4d0f1-a9be-47c6-88dd-f6952dfa528f"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd019"
                        },
                        new
                        {
                            Id = new Guid("deef45cd-0e2e-4b6a-9e77-d454f7be687b"),
                            EventId = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            QRCode = "TKT9f3bf734020"
                        },
                        new
                        {
                            Id = new Guid("2e603def-1f15-4232-b9bf-cd7be5459b2f"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            QRCode = "TKT63687531021"
                        },
                        new
                        {
                            Id = new Guid("1ca16860-9e26-4052-9d0e-3ddbb578ecc1"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            QRCode = "TKTfac64f8f022"
                        },
                        new
                        {
                            Id = new Guid("d4f1e853-dafb-4d26-9433-35832cc855ce"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            QRCode = "TKT63687531023"
                        },
                        new
                        {
                            Id = new Guid("326334a1-dbd4-4dcf-8df6-ab6f59995bf8"),
                            EventId = new Guid("51d7d7b0-018e-425b-b3c0-ba3de86b72b9"),
                            QRCode = "TKT51d7d7b0024"
                        },
                        new
                        {
                            Id = new Guid("b7838021-ae72-4d99-a8f2-ddb1b1a7a314"),
                            EventId = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            QRCode = "TKT9f3bf734025"
                        },
                        new
                        {
                            Id = new Guid("6b875b69-7321-448f-91ea-3f63dbd31266"),
                            EventId = new Guid("6dbaf1f4-3402-43a5-a786-0e2b17547549"),
                            QRCode = "TKT6dbaf1f4026"
                        },
                        new
                        {
                            Id = new Guid("e13b6a0a-41cb-4150-9b58-6157835100c6"),
                            EventId = new Guid("bd6a4daf-5c80-406e-82ea-da51cd180a58"),
                            QRCode = "TKTbd6a4daf027"
                        },
                        new
                        {
                            Id = new Guid("1f01c10e-f610-47e1-aae2-6d0a9a74f421"),
                            EventId = new Guid("6dbaf1f4-3402-43a5-a786-0e2b17547549"),
                            QRCode = "TKT6dbaf1f4028"
                        },
                        new
                        {
                            Id = new Guid("fbf3250c-a81a-4bbc-aacb-ee1ab8f0e2ad"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd029"
                        },
                        new
                        {
                            Id = new Guid("42e1d984-ab0b-42b5-b133-26896b994988"),
                            EventId = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            QRCode = "TKT9f3bf734030"
                        },
                        new
                        {
                            Id = new Guid("9abbb8dc-3018-4e26-9fbd-5be60c61e278"),
                            EventId = new Guid("891e1158-4b5d-4a11-8454-f7f91916305d"),
                            QRCode = "TKT891e1158031"
                        },
                        new
                        {
                            Id = new Guid("f1a931f4-5f0f-4905-8c7d-5e39bf8d841c"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            QRCode = "TKTecce423d032"
                        },
                        new
                        {
                            Id = new Guid("27ef5e90-0753-46c2-9ca3-e280bea05a5c"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            QRCode = "TKTecce423d033"
                        },
                        new
                        {
                            Id = new Guid("7d13f344-7814-4e5a-8b41-0fd0f9c17df3"),
                            EventId = new Guid("6dbaf1f4-3402-43a5-a786-0e2b17547549"),
                            QRCode = "TKT6dbaf1f4034"
                        },
                        new
                        {
                            Id = new Guid("85bc543d-95f9-48ab-bbdb-152f40492ceb"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd035"
                        },
                        new
                        {
                            Id = new Guid("69fcbd6c-a040-47d3-880f-68d09ab70336"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            QRCode = "TKT63687531036"
                        },
                        new
                        {
                            Id = new Guid("4be82f85-41fa-4ae0-b536-7a1e87a4d36a"),
                            EventId = new Guid("bd6a4daf-5c80-406e-82ea-da51cd180a58"),
                            QRCode = "TKTbd6a4daf037"
                        },
                        new
                        {
                            Id = new Guid("e5f046f3-152f-4a3e-a9af-c9cf976077df"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            QRCode = "TKTfac64f8f038"
                        },
                        new
                        {
                            Id = new Guid("4227c8c7-552c-40da-a155-98995ee308d3"),
                            EventId = new Guid("63687531-3575-4b11-81be-11683e3c5da9"),
                            QRCode = "TKT63687531039"
                        },
                        new
                        {
                            Id = new Guid("328e9e6f-01a8-433e-9123-6f1ec695f530"),
                            EventId = new Guid("9f3bf734-19e1-4446-ba7e-4d7c663c4b4a"),
                            QRCode = "TKT9f3bf734040"
                        },
                        new
                        {
                            Id = new Guid("7b51906e-2294-450e-9e25-776cc9f643a4"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd041"
                        },
                        new
                        {
                            Id = new Guid("ab36a73b-5a05-44c8-bd5c-6ba67e982ec7"),
                            EventId = new Guid("bd6a4daf-5c80-406e-82ea-da51cd180a58"),
                            QRCode = "TKTbd6a4daf042"
                        },
                        new
                        {
                            Id = new Guid("7b0ac589-21a8-423c-a007-40875be20b39"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd043"
                        },
                        new
                        {
                            Id = new Guid("88643958-1ba8-4568-924d-7657f82b1b24"),
                            EventId = new Guid("6dbaf1f4-3402-43a5-a786-0e2b17547549"),
                            QRCode = "TKT6dbaf1f4044"
                        },
                        new
                        {
                            Id = new Guid("1562a7d8-ea4b-4112-a1f0-070ab0e25c7e"),
                            EventId = new Guid("fac64f8f-0734-4646-bcc2-0916d0a25ac4"),
                            QRCode = "TKTfac64f8f045"
                        },
                        new
                        {
                            Id = new Guid("24a3fa64-83ec-413b-a7c0-d03a4df853cd"),
                            EventId = new Guid("c31f0086-5ef7-41de-beb6-3ba4c4aa2ef6"),
                            QRCode = "TKTc31f0086046"
                        },
                        new
                        {
                            Id = new Guid("b5df1aaa-64bc-4b5c-ab82-ca58a5867700"),
                            EventId = new Guid("51d7d7b0-018e-425b-b3c0-ba3de86b72b9"),
                            QRCode = "TKT51d7d7b0047"
                        },
                        new
                        {
                            Id = new Guid("f838c811-2cd9-4a7c-9eaf-b165cc078fdb"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            QRCode = "TKTecce423d048"
                        },
                        new
                        {
                            Id = new Guid("adbf8541-20f3-48a7-a898-e5218ca88468"),
                            EventId = new Guid("de4cc7fd-d65f-4b3f-990f-5fc8c8253dcd"),
                            QRCode = "TKTde4cc7fd049"
                        },
                        new
                        {
                            Id = new Guid("eff3960b-bf89-4d21-8ee3-3ba5ff441d4b"),
                            EventId = new Guid("ecce423d-7077-425b-a86a-ddafcef2ae33"),
                            QRCode = "TKTecce423d050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d42da656-c6ec-4e36-a4b6-a1597304a420"),
                            BirthDate = new DateTime(2004, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(735),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("48151ce6-0227-4901-8415-2443f641be7e"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(747),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("68136a4b-ade0-4623-af37-0ff4743c9c4b"),
                            BirthDate = new DateTime(1988, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(750),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b0e21802-791b-4b15-a9c3-163d851d3fa7"),
                            BirthDate = new DateTime(2000, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(753),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("22cbbfaf-0ba0-4388-8b81-1d0aae7a2865"),
                            BirthDate = new DateTime(1997, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(756),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("3ac67ecf-3b38-4023-a874-078950d3b50b"),
                            BirthDate = new DateTime(1998, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(759),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c0a9a7b6-da95-48b8-8011-bcd3253fe25a"),
                            BirthDate = new DateTime(1992, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(762),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("4ce80f1e-87c4-4715-873e-2ed5db0b7755"),
                            BirthDate = new DateTime(2003, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(766),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2746b476-55ad-4fc6-b760-958761b74e96"),
                            BirthDate = new DateTime(1986, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(768),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b904da78-05b6-401a-b638-ea188db61b2a"),
                            BirthDate = new DateTime(1996, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(773),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("0e2dd9ef-5fb2-4600-a1b0-019cb106d456"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(775),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("9575573f-ec32-4333-b9eb-ea1d3438d585"),
                            BirthDate = new DateTime(2000, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(777),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("104f6094-b35f-4d3e-99c7-039a283c4f92"),
                            BirthDate = new DateTime(1990, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(779),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("8fce9390-ee22-4b51-afa4-fc6fae2072ba"),
                            BirthDate = new DateTime(1998, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(782),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("635b38fb-f0ab-4d09-a4a5-b786097ad81a"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(784),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("594539ca-4134-420e-ad5a-adfdfed0c907"),
                            BirthDate = new DateTime(1991, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(787),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("75475e5b-ead8-4d92-9a4a-bb8eaeeb3f4a"),
                            BirthDate = new DateTime(1997, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(789),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("4cf971da-7e1f-4735-9e25-43c84c9e118e"),
                            BirthDate = new DateTime(1991, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(792),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("7a7a576b-dabd-4ecd-ba90-60b28eea2e3a"),
                            BirthDate = new DateTime(2001, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(794),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("fb253bb0-19c6-41fc-86cc-f79d397ecd1a"),
                            BirthDate = new DateTime(2004, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(796),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b8b15c97-8461-4a10-a98b-4c5b96b4cda1"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(801),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("9b19546a-2fc8-4b1a-9ae1-18492b0e78e4"),
                            BirthDate = new DateTime(1990, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(805),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("678a460c-b989-40fb-80e7-694bc8435005"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(807),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 13, 38, 150, DateTimeKind.Utc).AddTicks(541),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
