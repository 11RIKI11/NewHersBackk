// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604191024_123")]
    partial class _123
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("110a8208-8eaa-48e4-940e-fecd36d4fb15"),
                            BirthDate = new DateTime(2004, 5, 2, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5474),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "717460565",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("ce27b345-781e-48d9-8291-17aafe1a1235"),
                            BirthDate = new DateTime(2009, 9, 8, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5481),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4502 596973",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("68fd866a-0a21-46e3-990e-6f9c6af47b6f"),
                            BirthDate = new DateTime(2007, 11, 27, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5487),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "715956633",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("15efdf51-90ac-42a5-9b25-bb315acb7252"),
                            BirthDate = new DateTime(2003, 4, 18, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5489),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4504 397608",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("be29b1d2-5f22-4610-b779-fb34c359d026"),
                            BirthDate = new DateTime(2004, 5, 11, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5493),
                            CreatedAt = new DateTime(2025, 5, 30, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "711569997",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("c432ed8c-4bd5-48cc-ba9f-bd5507e35bd5"),
                            BirthDate = new DateTime(2002, 4, 22, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5497),
                            CreatedAt = new DateTime(2025, 5, 29, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4506 145417",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("4ffe2598-f6a3-4e2c-90f5-44ae787a6a28"),
                            BirthDate = new DateTime(2010, 3, 28, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5501),
                            CreatedAt = new DateTime(2025, 5, 28, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "712915713",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("4d465982-5c14-4c00-afab-c95625ffadc4"),
                            BirthDate = new DateTime(2003, 6, 28, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5503),
                            CreatedAt = new DateTime(2025, 5, 27, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4508 933161",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("e3324c19-3f3a-4da4-ad5a-23566a84355c"),
                            BirthDate = new DateTime(2010, 2, 18, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5505),
                            CreatedAt = new DateTime(2025, 5, 26, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "714484971",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("98661d35-6e40-49f2-958e-ada95e9b2fd0"),
                            BirthDate = new DateTime(2008, 10, 12, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5509),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4510 714052",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("013813d9-ab33-47cc-b3d9-1bde836160f7"),
                            BirthDate = new DateTime(2000, 9, 28, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5512),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "711003241",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("97b6777f-e05b-43b2-83e6-f43be1c44b31"),
                            BirthDate = new DateTime(2000, 7, 30, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5514),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4512 940779",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("fc0030e4-2e43-4a56-8e37-8dc7c0a3f45c"),
                            BirthDate = new DateTime(2004, 8, 24, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5517),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "715948199",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("8450f0ed-b47f-4564-8982-aafc1e8da40f"),
                            BirthDate = new DateTime(2005, 4, 29, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5521),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4514 298439",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("66a530e4-72a8-496f-b7d4-0650956f3c89"),
                            BirthDate = new DateTime(2009, 8, 20, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5523),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "719924747",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("386e55af-dc99-431c-9f38-1ae3d3fa8e7f"),
                            BirthDate = new DateTime(2008, 5, 24, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5526),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4516 891441",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("2176bf76-59ff-47f3-8b70-9081fa155b35"),
                            BirthDate = new DateTime(2009, 7, 27, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5528),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "713844506",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("74dfb566-da93-4176-9a6e-6ceeb665d612"),
                            BirthDate = new DateTime(2010, 4, 16, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5588),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4518 452963",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("0b2c731a-24b8-494c-9b84-c871f6a2db7b"),
                            BirthDate = new DateTime(2006, 3, 13, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5591),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "714086937",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("13abb2ab-0756-4934-a60b-d20d41b80b09"),
                            BirthDate = new DateTime(2007, 4, 10, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5593),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4520 380465",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("2917bfa6-3bcf-433a-b1a6-f81cfef0cdbe"),
                            BirthDate = new DateTime(2004, 10, 22, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5596),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "716335164",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("026d8281-c4cc-438e-9216-3217f58032e2"),
                            BirthDate = new DateTime(2009, 2, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5600),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4522 232733",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("db62fac7-78ef-4b8e-826c-61f989d973e4"),
                            BirthDate = new DateTime(2004, 2, 28, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5602),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "714885020",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("01c60dcb-02a7-4f7a-afca-0a39153e3bf7"),
                            BirthDate = new DateTime(2002, 10, 31, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5604),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4524 229589",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("2fabd7ef-6569-4613-91a6-b379931012ba"),
                            BirthDate = new DateTime(2009, 5, 26, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5607),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "712460414",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("cca8def9-540b-4866-a1a8-96cf344850fa"),
                            BirthDate = new DateTime(2007, 2, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5610),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4526 298269",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("70dd0949-ba4e-4a1a-afd2-3d1d534b3705"),
                            BirthDate = new DateTime(2008, 7, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5613),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "715803068",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("e0f21c31-2d52-4943-9f31-96661a90b874"),
                            BirthDate = new DateTime(2004, 7, 26, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5616),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4528 566393",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("29e0d7a2-a04e-400a-a6aa-9f52c9dd5069"),
                            BirthDate = new DateTime(2004, 9, 10, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5619),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "717079175",
                            DocumentType = "foreignPassport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("8ae8f722-5eaa-4880-9a7b-221ec221de8b"),
                            BirthDate = new DateTime(2006, 1, 15, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5623),
                            CreatedAt = new DateTime(2025, 5, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            DocumentNumber = "4530 273468",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 6, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 6, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("2cc2c87a-e41e-4a3e-b49f-e63d46245fc7"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 6, 6, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("3354259e-6f05-456f-941e-fb84df2f3097"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 6, 7, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 6, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("c4b2b002-f88b-4541-b3bf-eee41d44d6c5"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 8, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 8, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 9, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 9, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 10, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 10, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 11, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 11, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 12, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 13, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("96d56ba5-bc43-48ab-9bef-67ce1f436e6d"),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 14, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 14, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7594e40-5183-45aa-8121-9249c2960982"),
                            Amount = 5400m,
                            BuyerId = new Guid("2d305769-b08b-4b73-8b8d-93227e5cea93"),
                            CreatedAt = new DateTime(2025, 5, 31, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 5, 31, 19, 20, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/d7594e40-5183-45aa-8121-9249c2960982",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("e41fdc8d-dd98-45a6-b953-2d7cebbf84d3"),
                            Amount = 3800m,
                            BuyerId = new Guid("a1128bbc-71c9-4af3-a5d1-f6a12ee21f32"),
                            CreatedAt = new DateTime(2025, 6, 1, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 1, 19, 25, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/e41fdc8d-dd98-45a6-b953-2d7cebbf84d3",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("d5270f8a-4a12-4aed-b20f-efc7bc94a91b"),
                            Amount = 4600m,
                            BuyerId = new Guid("7c7e657e-829b-4e8c-8e36-6d5e801cded9"),
                            CreatedAt = new DateTime(2025, 6, 2, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 2, 19, 32, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/d5270f8a-4a12-4aed-b20f-efc7bc94a91b",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("8d1f48fe-8ae7-4668-8881-393172403acb"),
                            Amount = 4800m,
                            BuyerId = new Guid("db3f90ad-7d19-4020-98c3-63d2407ce1dd"),
                            CreatedAt = new DateTime(2025, 6, 3, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 3, 19, 30, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/8d1f48fe-8ae7-4668-8881-393172403acb",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("baefb53c-2ddf-46e2-ba71-c01a5bf6ec60"),
                            Amount = 3800m,
                            BuyerId = new Guid("2d305769-b08b-4b73-8b8d-93227e5cea93"),
                            CreatedAt = new DateTime(2025, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 4, 19, 22, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/baefb53c-2ddf-46e2-ba71-c01a5bf6ec60",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("8f60025c-a83b-457e-98f9-cfedf2a1f247"),
                            Amount = 3600m,
                            BuyerId = new Guid("2d305769-b08b-4b73-8b8d-93227e5cea93"),
                            CreatedAt = new DateTime(2025, 6, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 5, 19, 34, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/8f60025c-a83b-457e-98f9-cfedf2a1f247",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("34d35398-8d27-45d2-8081-37ca533cbb45"),
                            Amount = 4200m,
                            BuyerId = new Guid("1d1b9628-a82e-4e21-ab72-90f6bc59eaf6"),
                            CreatedAt = new DateTime(2025, 6, 6, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 6, 19, 37, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/34d35398-8d27-45d2-8081-37ca533cbb45",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("87d7f811-f523-4aa0-9c73-ac8c05fb1767"),
                            Amount = 2800m,
                            BuyerId = new Guid("5b74b9ae-2f2d-45b2-929c-293319ab2e01"),
                            CreatedAt = new DateTime(2025, 6, 7, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 7, 19, 25, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/87d7f811-f523-4aa0-9c73-ac8c05fb1767",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("011382b0-a292-4436-a19d-ae040806679f"),
                            Amount = 0m,
                            BuyerId = new Guid("7c7e657e-829b-4e8c-8e36-6d5e801cded9"),
                            CreatedAt = new DateTime(2025, 6, 8, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 8, 19, 33, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/011382b0-a292-4436-a19d-ae040806679f",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("3f81032b-2b0f-4286-a487-ca42bd3ed0a9"),
                            Amount = 0m,
                            BuyerId = new Guid("5dae534f-facc-4915-b3ce-e8a2f241b66b"),
                            CreatedAt = new DateTime(2025, 6, 9, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            PaidAt = new DateTime(2025, 6, 9, 19, 25, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            QrUrl = "https://payment.example.com/3f81032b-2b0f-4286-a487-ca42bd3ed0a9",
                            Status = "paid"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ca7480d-23f3-4ae9-994a-0e5b1322455b"),
                            AttendeeId = new Guid("70dd0949-ba4e-4a1a-afd2-3d1d534b3705"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            PaymentId = new Guid("d7594e40-5183-45aa-8121-9249c2960982"),
                            QRCode = "TKTfe9622d0001"
                        },
                        new
                        {
                            Id = new Guid("e78a72bc-01ed-438e-bebe-ae6065adcb2b"),
                            AttendeeId = new Guid("66a530e4-72a8-496f-b7d4-0650956f3c89"),
                            EventId = new Guid("96d56ba5-bc43-48ab-9bef-67ce1f436e6d"),
                            PaymentId = new Guid("d7594e40-5183-45aa-8121-9249c2960982"),
                            QRCode = "TKT96d56ba5002"
                        },
                        new
                        {
                            Id = new Guid("1d9da093-61ca-459e-8189-06930da58978"),
                            AttendeeId = new Guid("68fd866a-0a21-46e3-990e-6f9c6af47b6f"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            PaymentId = new Guid("e41fdc8d-dd98-45a6-b953-2d7cebbf84d3"),
                            QRCode = "TKTab369c7d003"
                        },
                        new
                        {
                            Id = new Guid("6e6ef72b-5d31-49d3-93c9-c0a119b2e922"),
                            AttendeeId = new Guid("66a530e4-72a8-496f-b7d4-0650956f3c89"),
                            EventId = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            PaymentId = new Guid("e41fdc8d-dd98-45a6-b953-2d7cebbf84d3"),
                            QRCode = "TKTb10191df004"
                        },
                        new
                        {
                            Id = new Guid("6149238e-ac25-4e54-ad18-5635c93b0344"),
                            AttendeeId = new Guid("2176bf76-59ff-47f3-8b70-9081fa155b35"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            PaymentId = new Guid("d5270f8a-4a12-4aed-b20f-efc7bc94a91b"),
                            QRCode = "TKTab369c7d005"
                        },
                        new
                        {
                            Id = new Guid("4977bb5c-5a7d-4a91-bf2f-4a657f991cdd"),
                            AttendeeId = new Guid("68fd866a-0a21-46e3-990e-6f9c6af47b6f"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            PaymentId = new Guid("d5270f8a-4a12-4aed-b20f-efc7bc94a91b"),
                            QRCode = "TKTfe9622d0006"
                        },
                        new
                        {
                            Id = new Guid("2e6558d6-7001-4e6d-b00c-1dd42da2c24a"),
                            AttendeeId = new Guid("110a8208-8eaa-48e4-940e-fecd36d4fb15"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            PaymentId = new Guid("8d1f48fe-8ae7-4668-8881-393172403acb"),
                            QRCode = "TKT0283516e007"
                        },
                        new
                        {
                            Id = new Guid("d4b6dbca-e65b-4abd-b374-082457c38956"),
                            AttendeeId = new Guid("01c60dcb-02a7-4f7a-afca-0a39153e3bf7"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            PaymentId = new Guid("8d1f48fe-8ae7-4668-8881-393172403acb"),
                            QRCode = "TKT0283516e008"
                        },
                        new
                        {
                            Id = new Guid("f99ff172-9aa3-4b22-a8ad-5092309b799c"),
                            AttendeeId = new Guid("2fabd7ef-6569-4613-91a6-b379931012ba"),
                            EventId = new Guid("3354259e-6f05-456f-941e-fb84df2f3097"),
                            PaymentId = new Guid("baefb53c-2ddf-46e2-ba71-c01a5bf6ec60"),
                            QRCode = "TKT3354259e009"
                        },
                        new
                        {
                            Id = new Guid("a5cb39e1-5136-497e-a66c-6a8828c38431"),
                            AttendeeId = new Guid("98661d35-6e40-49f2-958e-ada95e9b2fd0"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            PaymentId = new Guid("baefb53c-2ddf-46e2-ba71-c01a5bf6ec60"),
                            QRCode = "TKT0283516e010"
                        },
                        new
                        {
                            Id = new Guid("1a163aa9-5e29-4055-9251-6cb92ed75ae0"),
                            AttendeeId = new Guid("026d8281-c4cc-438e-9216-3217f58032e2"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            PaymentId = new Guid("8f60025c-a83b-457e-98f9-cfedf2a1f247"),
                            QRCode = "TKT12c81cc2011"
                        },
                        new
                        {
                            Id = new Guid("2d50e9a9-3239-4e8f-a62d-92b9652518f5"),
                            AttendeeId = new Guid("db62fac7-78ef-4b8e-826c-61f989d973e4"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            PaymentId = new Guid("8f60025c-a83b-457e-98f9-cfedf2a1f247"),
                            QRCode = "TKTfe9622d0012"
                        },
                        new
                        {
                            Id = new Guid("e342d7b3-2e35-49b8-9b78-df3cd0e5984b"),
                            AttendeeId = new Guid("8450f0ed-b47f-4564-8982-aafc1e8da40f"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            PaymentId = new Guid("34d35398-8d27-45d2-8081-37ca533cbb45"),
                            QRCode = "TKTfe9622d0013"
                        },
                        new
                        {
                            Id = new Guid("f42cb008-fdf3-4893-86c4-61306e9b4ef0"),
                            AttendeeId = new Guid("97b6777f-e05b-43b2-83e6-f43be1c44b31"),
                            EventId = new Guid("c4b2b002-f88b-4541-b3bf-eee41d44d6c5"),
                            PaymentId = new Guid("34d35398-8d27-45d2-8081-37ca533cbb45"),
                            QRCode = "TKTc4b2b002014"
                        },
                        new
                        {
                            Id = new Guid("95a23d32-77ae-41c2-95e3-cb1e12f6fb2c"),
                            AttendeeId = new Guid("70dd0949-ba4e-4a1a-afd2-3d1d534b3705"),
                            EventId = new Guid("96d56ba5-bc43-48ab-9bef-67ce1f436e6d"),
                            PaymentId = new Guid("87d7f811-f523-4aa0-9c73-ac8c05fb1767"),
                            QRCode = "TKT96d56ba5015"
                        },
                        new
                        {
                            Id = new Guid("f514b20a-59c2-47ea-8774-4725236329cc"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            QRCode = "TKT12c81cc2016"
                        },
                        new
                        {
                            Id = new Guid("15864f5b-0797-4574-8f2f-0360829a404d"),
                            EventId = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            QRCode = "TKTb10191df017"
                        },
                        new
                        {
                            Id = new Guid("873b7c95-516a-45e4-8936-863b71705e9b"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            QRCode = "TKTab369c7d018"
                        },
                        new
                        {
                            Id = new Guid("c44cd7a9-aae0-4bc3-a40f-7c10bc06316f"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1019"
                        },
                        new
                        {
                            Id = new Guid("8c76d00e-c5c3-4c42-9e9d-d2e7479ec07b"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0020"
                        },
                        new
                        {
                            Id = new Guid("0b082856-db31-4949-90e6-3759259d8938"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0021"
                        },
                        new
                        {
                            Id = new Guid("fa96b415-5c50-4529-a272-e942c0855639"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            QRCode = "TKTab369c7d022"
                        },
                        new
                        {
                            Id = new Guid("5142d116-bb58-419a-82f2-1182d7f8df89"),
                            EventId = new Guid("c4b2b002-f88b-4541-b3bf-eee41d44d6c5"),
                            QRCode = "TKTc4b2b002023"
                        },
                        new
                        {
                            Id = new Guid("d3548dba-1b49-42da-8b7d-f12a6e44ec79"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            QRCode = "TKT0283516e024"
                        },
                        new
                        {
                            Id = new Guid("eb69ee0e-03c4-42b6-b078-d257e69c381f"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            QRCode = "TKT12c81cc2025"
                        },
                        new
                        {
                            Id = new Guid("298000ae-f99c-4066-a0ed-b50ab0201cef"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1026"
                        },
                        new
                        {
                            Id = new Guid("45055b75-a20e-47b0-b900-8a4c0d8a1e10"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            QRCode = "TKT12c81cc2027"
                        },
                        new
                        {
                            Id = new Guid("b0a9c3b0-ce6c-442a-91e0-d97b342b1e15"),
                            EventId = new Guid("2cc2c87a-e41e-4a3e-b49f-e63d46245fc7"),
                            QRCode = "TKT2cc2c87a028"
                        },
                        new
                        {
                            Id = new Guid("e24434a3-8378-4a5c-8cdc-99081594a22a"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1029"
                        },
                        new
                        {
                            Id = new Guid("22799b5e-a4e5-428c-a552-1f980ba4d210"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            QRCode = "TKT0283516e030"
                        },
                        new
                        {
                            Id = new Guid("7056ef4a-7c60-4c81-998d-284b12ab3b09"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            QRCode = "TKTab369c7d031"
                        },
                        new
                        {
                            Id = new Guid("c3299eef-fad0-4e3e-bccd-2f7bc0571707"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0032"
                        },
                        new
                        {
                            Id = new Guid("2523dac0-f1b9-4e72-93ac-4e725900c3e3"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            QRCode = "TKT12c81cc2033"
                        },
                        new
                        {
                            Id = new Guid("0638cf4e-e460-409f-b695-4762274a6b19"),
                            EventId = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            QRCode = "TKTb10191df034"
                        },
                        new
                        {
                            Id = new Guid("23b6b0d6-d5c7-4e13-8aa4-ba7c1bfb6f91"),
                            EventId = new Guid("c4b2b002-f88b-4541-b3bf-eee41d44d6c5"),
                            QRCode = "TKTc4b2b002035"
                        },
                        new
                        {
                            Id = new Guid("dc1b15e6-a745-4664-a888-25ea6216ce29"),
                            EventId = new Guid("12c81cc2-f696-4b9d-970c-4810167aa891"),
                            QRCode = "TKT12c81cc2036"
                        },
                        new
                        {
                            Id = new Guid("418bfbc6-ff3f-45f4-ae45-e065188f8357"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            QRCode = "TKTab369c7d037"
                        },
                        new
                        {
                            Id = new Guid("d0969c3f-1b1c-4ce9-b69e-d5eb5d60df49"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1038"
                        },
                        new
                        {
                            Id = new Guid("9dd0ca50-2a70-4283-bcf1-6fba796b14fb"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0039"
                        },
                        new
                        {
                            Id = new Guid("c6a34761-c359-45f1-9d71-4159ca13a04d"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            QRCode = "TKT0283516e040"
                        },
                        new
                        {
                            Id = new Guid("2ad33a67-bb0b-464e-b081-e89e9b2364f4"),
                            EventId = new Guid("0283516e-b3a6-4d8f-bbc5-ff0e4a1c0482"),
                            QRCode = "TKT0283516e041"
                        },
                        new
                        {
                            Id = new Guid("6804d82f-c5f0-45c9-bde1-23dbe3356daa"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1042"
                        },
                        new
                        {
                            Id = new Guid("1a25b745-a70d-44ba-8246-bfe4398521a1"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0043"
                        },
                        new
                        {
                            Id = new Guid("c9ad920d-91a0-46ce-99dd-682d0da43ff6"),
                            EventId = new Guid("96d56ba5-bc43-48ab-9bef-67ce1f436e6d"),
                            QRCode = "TKT96d56ba5044"
                        },
                        new
                        {
                            Id = new Guid("37d6f0ca-6ddf-4bcc-a8b8-635267b7d35b"),
                            EventId = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            QRCode = "TKTb10191df045"
                        },
                        new
                        {
                            Id = new Guid("43fc75af-3faa-4f4d-9730-24afd21f147a"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0046"
                        },
                        new
                        {
                            Id = new Guid("66c10d16-db48-4416-aabc-63b798710500"),
                            EventId = new Guid("fe9622d0-58a4-40c6-8d53-8663bac757a1"),
                            QRCode = "TKTfe9622d0047"
                        },
                        new
                        {
                            Id = new Guid("0d9b3e22-db8e-45cd-bb55-2991e1abb422"),
                            EventId = new Guid("b10191df-e5db-4165-81a1-243b1b7e2aa6"),
                            QRCode = "TKTb10191df048"
                        },
                        new
                        {
                            Id = new Guid("603e9efa-1a39-4d6d-a135-93e88d0daf06"),
                            EventId = new Guid("c39ed2f1-060a-4d49-bf92-139693de5f8b"),
                            QRCode = "TKTc39ed2f1049"
                        },
                        new
                        {
                            Id = new Guid("4c02d4ba-08fc-43d2-87dc-61e4507d3b97"),
                            EventId = new Guid("ab369c7d-1f1a-4c79-8f98-44a2089eb1df"),
                            QRCode = "TKTab369c7d050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c46e616d-94fc-463a-b494-e938d3772225"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5314),
                            CreatedAt = new DateTime(2025, 5, 6, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("376574cb-db0b-45c1-bd6e-d9b581998446"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5320),
                            CreatedAt = new DateTime(2025, 5, 7, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("fbee18e7-9332-4e43-83c9-efb3aebbd1f4"),
                            BirthDate = new DateTime(1986, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5324),
                            CreatedAt = new DateTime(2025, 5, 8, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("9ec2f282-630a-4402-ac4f-290b4484ffd0"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5326),
                            CreatedAt = new DateTime(2025, 5, 9, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("82cad756-208e-4022-9344-50b25afb61e1"),
                            BirthDate = new DateTime(2004, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5331),
                            CreatedAt = new DateTime(2025, 5, 10, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("540f806b-2c15-4dd3-89f9-78b2e131587d"),
                            BirthDate = new DateTime(1999, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5335),
                            CreatedAt = new DateTime(2025, 5, 11, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("a1128bbc-71c9-4af3-a5d1-f6a12ee21f32"),
                            BirthDate = new DateTime(1993, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5412),
                            CreatedAt = new DateTime(2025, 5, 12, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("238a4092-1433-4a6a-b4fb-c2be5aa0f0f4"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5416),
                            CreatedAt = new DateTime(2025, 5, 13, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("439869cc-b72b-4a1e-a52b-30c07d535259"),
                            BirthDate = new DateTime(2002, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5419),
                            CreatedAt = new DateTime(2025, 5, 14, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5b74b9ae-2f2d-45b2-929c-293319ab2e01"),
                            BirthDate = new DateTime(1991, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5425),
                            CreatedAt = new DateTime(2025, 5, 15, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("7c7e657e-829b-4e8c-8e36-6d5e801cded9"),
                            BirthDate = new DateTime(1987, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5428),
                            CreatedAt = new DateTime(2025, 5, 16, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("db3f90ad-7d19-4020-98c3-63d2407ce1dd"),
                            BirthDate = new DateTime(2005, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5430),
                            CreatedAt = new DateTime(2025, 5, 17, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("5dae534f-facc-4915-b3ce-e8a2f241b66b"),
                            BirthDate = new DateTime(1999, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5434),
                            CreatedAt = new DateTime(2025, 5, 18, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("1d1b9628-a82e-4e21-ab72-90f6bc59eaf6"),
                            BirthDate = new DateTime(1993, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5437),
                            CreatedAt = new DateTime(2025, 5, 19, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("abd2d703-75e8-4b06-8735-c86799334fe4"),
                            BirthDate = new DateTime(1994, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5439),
                            CreatedAt = new DateTime(2025, 5, 20, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("4bff6303-44e6-4296-90c9-5f92cf1a8605"),
                            BirthDate = new DateTime(2000, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5442),
                            CreatedAt = new DateTime(2025, 5, 21, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2d305769-b08b-4b73-8b8d-93227e5cea93"),
                            BirthDate = new DateTime(1990, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5445),
                            CreatedAt = new DateTime(2025, 5, 22, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("fe13277d-0ec4-4257-aae2-c4d5eb2e84a7"),
                            BirthDate = new DateTime(2005, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5449),
                            CreatedAt = new DateTime(2025, 5, 23, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("eec7af0e-8251-4482-9d9c-c8a846f73572"),
                            BirthDate = new DateTime(1997, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5451),
                            CreatedAt = new DateTime(2025, 5, 24, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("c844a3ec-65fc-46b2-a936-87f88199a295"),
                            BirthDate = new DateTime(1997, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5454),
                            CreatedAt = new DateTime(2025, 5, 25, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b1e2fb5a-b31d-4f1c-a037-e5a65858abad"),
                            BirthDate = new DateTime(1989, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5461),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("c6fcca63-cc39-4c68-8d23-d2449f7cef38"),
                            BirthDate = new DateTime(1986, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5466),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("0466994d-5630-4847-a758-67800a6fda99"),
                            BirthDate = new DateTime(1995, 6, 4, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5469),
                            CreatedAt = new DateTime(2025, 4, 5, 19, 10, 23, 487, DateTimeKind.Utc).AddTicks(5147),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
