// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603154053_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72914bf6-3665-4000-997f-b19de189a99a"),
                            BirthDate = new DateTime(2009, 2, 19, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6550),
                            CreatedAt = new DateTime(2025, 6, 2, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "717964150",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 1"
                        },
                        new
                        {
                            Id = new Guid("36919f53-52ab-4746-9c3b-1355b82f1647"),
                            BirthDate = new DateTime(2005, 1, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6558),
                            CreatedAt = new DateTime(2025, 6, 1, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4502 354874",
                            DocumentType = "passport",
                            FullName = "Петров Петр 2"
                        },
                        new
                        {
                            Id = new Guid("638c2954-c17f-4030-9d2d-0360e43d2b85"),
                            BirthDate = new DateTime(2003, 6, 9, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6565),
                            CreatedAt = new DateTime(2025, 5, 31, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "712648195",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 3"
                        },
                        new
                        {
                            Id = new Guid("3c8db3a5-105d-4054-b080-47c967446149"),
                            BirthDate = new DateTime(2001, 7, 25, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6568),
                            CreatedAt = new DateTime(2025, 5, 30, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4504 929793",
                            DocumentType = "passport",
                            FullName = "Петров Петр 4"
                        },
                        new
                        {
                            Id = new Guid("6bffe0a3-4408-4249-ae36-36565809ae9f"),
                            BirthDate = new DateTime(2007, 9, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6573),
                            CreatedAt = new DateTime(2025, 5, 29, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "719585079",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 5"
                        },
                        new
                        {
                            Id = new Guid("f824c455-81b1-41ba-861c-31750e783db5"),
                            BirthDate = new DateTime(2005, 3, 21, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6578),
                            CreatedAt = new DateTime(2025, 5, 28, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4506 573560",
                            DocumentType = "passport",
                            FullName = "Петров Петр 6"
                        },
                        new
                        {
                            Id = new Guid("6dd23b55-e1a0-4bc0-b6d2-10c2e1956c42"),
                            BirthDate = new DateTime(2009, 8, 11, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6581),
                            CreatedAt = new DateTime(2025, 5, 27, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "711048034",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 7"
                        },
                        new
                        {
                            Id = new Guid("05f7a3ea-9028-435e-ae24-374336a7286b"),
                            BirthDate = new DateTime(2004, 1, 11, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6585),
                            CreatedAt = new DateTime(2025, 5, 26, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4508 719064",
                            DocumentType = "passport",
                            FullName = "Петров Петр 8"
                        },
                        new
                        {
                            Id = new Guid("0a49c5c2-2151-48b6-bb6b-899e9cf760f2"),
                            BirthDate = new DateTime(2004, 8, 19, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6588),
                            CreatedAt = new DateTime(2025, 5, 25, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "716621081",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 9"
                        },
                        new
                        {
                            Id = new Guid("848320fb-2c51-45ff-89d0-86bdd144dad2"),
                            BirthDate = new DateTime(2010, 1, 8, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6592),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4510 144660",
                            DocumentType = "passport",
                            FullName = "Петров Петр 10"
                        },
                        new
                        {
                            Id = new Guid("dc7cac57-399f-4910-ad68-06b6e8300249"),
                            BirthDate = new DateTime(2000, 8, 13, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6595),
                            CreatedAt = new DateTime(2025, 5, 23, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "717361446",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 11"
                        },
                        new
                        {
                            Id = new Guid("431f03e5-69f1-43df-8339-fdfc618d8963"),
                            BirthDate = new DateTime(2004, 8, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6598),
                            CreatedAt = new DateTime(2025, 5, 22, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4512 106247",
                            DocumentType = "passport",
                            FullName = "Петров Петр 12"
                        },
                        new
                        {
                            Id = new Guid("166db998-77a3-4add-8832-189f9bfc646c"),
                            BirthDate = new DateTime(2008, 3, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6635),
                            CreatedAt = new DateTime(2025, 5, 21, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "718667873",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 13"
                        },
                        new
                        {
                            Id = new Guid("22b532a5-6e8d-4ac8-9b85-707628ec8eee"),
                            BirthDate = new DateTime(2007, 1, 26, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6638),
                            CreatedAt = new DateTime(2025, 5, 20, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4514 609140",
                            DocumentType = "passport",
                            FullName = "Петров Петр 14"
                        },
                        new
                        {
                            Id = new Guid("53c08289-84d6-46e9-b818-dfa6d8da4a0f"),
                            BirthDate = new DateTime(2003, 5, 28, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6642),
                            CreatedAt = new DateTime(2025, 5, 19, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "712655280",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 15"
                        },
                        new
                        {
                            Id = new Guid("c2d8563a-5801-4b80-8ca2-899e8ec97059"),
                            BirthDate = new DateTime(2006, 12, 26, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6645),
                            CreatedAt = new DateTime(2025, 5, 18, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4516 535549",
                            DocumentType = "passport",
                            FullName = "Петров Петр 16"
                        },
                        new
                        {
                            Id = new Guid("92060bdd-0a2e-4b7f-a502-6ab9e5a0fdd8"),
                            BirthDate = new DateTime(2005, 11, 19, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6648),
                            CreatedAt = new DateTime(2025, 5, 17, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "717010736",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 17"
                        },
                        new
                        {
                            Id = new Guid("d604a11a-6e92-4bc4-af3c-585b28e5ccc5"),
                            BirthDate = new DateTime(2002, 8, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6652),
                            CreatedAt = new DateTime(2025, 5, 16, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4518 350843",
                            DocumentType = "passport",
                            FullName = "Петров Петр 18"
                        },
                        new
                        {
                            Id = new Guid("52f87051-5f6c-4869-8535-351b9b0d049b"),
                            BirthDate = new DateTime(2008, 5, 15, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6655),
                            CreatedAt = new DateTime(2025, 5, 15, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "711964418",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 19"
                        },
                        new
                        {
                            Id = new Guid("482de6fc-411e-464c-a525-85082bbe58ee"),
                            BirthDate = new DateTime(2007, 9, 12, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6658),
                            CreatedAt = new DateTime(2025, 5, 14, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4520 658550",
                            DocumentType = "passport",
                            FullName = "Петров Петр 20"
                        },
                        new
                        {
                            Id = new Guid("269355b9-67f4-413b-b97e-19005e1d1899"),
                            BirthDate = new DateTime(2009, 11, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6663),
                            CreatedAt = new DateTime(2025, 5, 13, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "718911778",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 21"
                        },
                        new
                        {
                            Id = new Guid("a700f80d-dfdf-46aa-bf3a-911504065485"),
                            BirthDate = new DateTime(2010, 3, 27, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6665),
                            CreatedAt = new DateTime(2025, 5, 12, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4522 788133",
                            DocumentType = "passport",
                            FullName = "Петров Петр 22"
                        },
                        new
                        {
                            Id = new Guid("16a1eb9c-a487-49d7-9869-88843eee7ee3"),
                            BirthDate = new DateTime(2002, 3, 23, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6668),
                            CreatedAt = new DateTime(2025, 5, 11, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "711684046",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 23"
                        },
                        new
                        {
                            Id = new Guid("ff25a554-a5f4-41e2-bfcb-d11dd758f850"),
                            BirthDate = new DateTime(2007, 1, 10, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6671),
                            CreatedAt = new DateTime(2025, 5, 10, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4524 839352",
                            DocumentType = "passport",
                            FullName = "Петров Петр 24"
                        },
                        new
                        {
                            Id = new Guid("59b9618a-5535-4a4e-845e-9e4c02265b13"),
                            BirthDate = new DateTime(2006, 1, 8, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6674),
                            CreatedAt = new DateTime(2025, 5, 9, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "719355124",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 25"
                        },
                        new
                        {
                            Id = new Guid("f028997d-bd96-4b24-a62a-f0b859eb4019"),
                            BirthDate = new DateTime(2005, 11, 11, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6678),
                            CreatedAt = new DateTime(2025, 5, 8, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4526 207440",
                            DocumentType = "passport",
                            FullName = "Петров Петр 26"
                        },
                        new
                        {
                            Id = new Guid("8bd89f32-817c-4f6a-ba1e-faec95dd4216"),
                            BirthDate = new DateTime(2003, 2, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6680),
                            CreatedAt = new DateTime(2025, 5, 7, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "715767443",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 27"
                        },
                        new
                        {
                            Id = new Guid("a62aa04d-5e34-470d-a9e7-fef04eba931e"),
                            BirthDate = new DateTime(2002, 3, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6683),
                            CreatedAt = new DateTime(2025, 5, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4528 716136",
                            DocumentType = "passport",
                            FullName = "Петров Петр 28"
                        },
                        new
                        {
                            Id = new Guid("4d9dc997-d7d9-47b7-a163-67bd95410cb1"),
                            BirthDate = new DateTime(2001, 8, 16, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6688),
                            CreatedAt = new DateTime(2025, 5, 5, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "714266870",
                            DocumentType = "foreign_passport",
                            FullName = "Петров Петр 29"
                        },
                        new
                        {
                            Id = new Guid("09900b10-4638-43c1-9e91-1ebef3d083c5"),
                            BirthDate = new DateTime(2008, 1, 9, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6690),
                            CreatedAt = new DateTime(2025, 5, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            DocumentNumber = "4530 682348",
                            DocumentType = "passport",
                            FullName = "Петров Петр 30"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a482e26c-a668-4af0-b775-f5222683a8c8"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по экскурсия в кремль",
                            EndTime = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Красная площадь",
                            Price = 1000m,
                            StartTime = new DateTime(2025, 6, 4, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Экскурсия в Кремль"
                        },
                        new
                        {
                            Id = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по третьяковская галерея",
                            EndTime = new DateTime(2025, 6, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Лаврушинский переулок",
                            Price = 1200m,
                            StartTime = new DateTime(2025, 6, 5, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Третьяковская галерея"
                        },
                        new
                        {
                            Id = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по музей космонавтики",
                            EndTime = new DateTime(2025, 6, 6, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Мира",
                            Price = 1400m,
                            StartTime = new DateTime(2025, 6, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Музей космонавтики"
                        },
                        new
                        {
                            Id = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по царицыно",
                            EndTime = new DateTime(2025, 6, 7, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "ул. Дольская",
                            Price = 1600m,
                            StartTime = new DateTime(2025, 6, 7, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Царицыно"
                        },
                        new
                        {
                            Id = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по коломенское",
                            EndTime = new DateTime(2025, 6, 8, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "пр-т Андропова",
                            Price = 1800m,
                            StartTime = new DateTime(2025, 6, 8, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Коломенское"
                        },
                        new
                        {
                            Id = new Guid("528b32d2-de91-40b7-81a6-e1a49dc40a54"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по архитектурная прогулка",
                            EndTime = new DateTime(2025, 6, 9, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Китай-город",
                            Price = 2000m,
                            StartTime = new DateTime(2025, 6, 9, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Архитектурная прогулка"
                        },
                        new
                        {
                            Id = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по москва купеческая",
                            EndTime = new DateTime(2025, 6, 10, 14, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Замоскворечье",
                            Price = 2200m,
                            StartTime = new DateTime(2025, 6, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "excursion",
                            TicketsCount = 15,
                            Title = "Москва купеческая"
                        },
                        new
                        {
                            Id = new Guid("0d56bddc-ca2d-4141-a654-94dadd739fe5"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по вечерняя москва",
                            EndTime = new DateTime(2025, 6, 11, 15, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Тверская улица",
                            Price = 2400m,
                            StartTime = new DateTime(2025, 6, 11, 13, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Вечерняя Москва"
                        },
                        new
                        {
                            Id = new Guid("8ceacdc0-3f08-4893-a79f-a5ce100a4f72"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по булгаковская москва",
                            EndTime = new DateTime(2025, 6, 12, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Патриаршие пруды",
                            Price = 2600m,
                            StartTime = new DateTime(2025, 6, 12, 10, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Булгаковская Москва"
                        },
                        new
                        {
                            Id = new Guid("441eb09d-ef74-4198-9d22-4153ff1366a6"),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Description = "Увлекательная экскурсия по московское метро",
                            EndTime = new DateTime(2025, 6, 13, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Location = "Площадь Революции",
                            Price = 2800m,
                            StartTime = new DateTime(2025, 6, 13, 11, 0, 0, 0, DateTimeKind.Utc),
                            Tag = "event",
                            TicketsCount = 15,
                            Title = "Московское метро"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasColumnType("text");

                    b.Property<string>("EntityTarget")
                        .HasColumnType("text");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("LocalOrderRank")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("236710f7-3a3e-40cb-93e7-bd779f03fe24"),
                            Amount = 3200m,
                            BuyerId = new Guid("daa4f299-b390-4384-bf81-61656b3f7221"),
                            CreatedAt = new DateTime(2025, 5, 30, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 5, 30, 16, 2, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/236710f7-3a3e-40cb-93e7-bd779f03fe24",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("b00f0a9e-9a56-4c8d-af0e-df2d15ecd1df"),
                            Amount = 3800m,
                            BuyerId = new Guid("15e95276-17f9-44bc-9bcb-07cee7dd58b6"),
                            CreatedAt = new DateTime(2025, 5, 31, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 5, 31, 15, 45, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/b00f0a9e-9a56-4c8d-af0e-df2d15ecd1df",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("d9329098-a3ad-471e-861f-25d17a54b052"),
                            Amount = 3000m,
                            BuyerId = new Guid("06c98e8c-1fb4-4d24-bcd4-f505e1e4f329"),
                            CreatedAt = new DateTime(2025, 6, 1, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 1, 16, 4, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/d9329098-a3ad-471e-861f-25d17a54b052",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("84757dd4-9913-4d16-945b-3657dd48818e"),
                            Amount = 4000m,
                            BuyerId = new Guid("bd5f7c42-2b9a-41af-97af-04b6d8ce138a"),
                            CreatedAt = new DateTime(2025, 6, 2, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 2, 16, 9, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/84757dd4-9913-4d16-945b-3657dd48818e",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("6fadee5b-916c-4953-8610-bf1cd2dd03b5"),
                            Amount = 3200m,
                            BuyerId = new Guid("bd5f7c42-2b9a-41af-97af-04b6d8ce138a"),
                            CreatedAt = new DateTime(2025, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 3, 15, 49, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/6fadee5b-916c-4953-8610-bf1cd2dd03b5",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("8e8976dd-6d13-4e2d-ba34-5e8755039b79"),
                            Amount = 3800m,
                            BuyerId = new Guid("daae1eef-841b-4444-80b1-4cc0a4201503"),
                            CreatedAt = new DateTime(2025, 6, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 4, 15, 55, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/8e8976dd-6d13-4e2d-ba34-5e8755039b79",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("b88c88b1-29d6-464e-8662-2c6a35a2a361"),
                            Amount = 2800m,
                            BuyerId = new Guid("7d740557-77de-49da-9882-d12122f6f1e6"),
                            CreatedAt = new DateTime(2025, 6, 5, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 5, 15, 53, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/b88c88b1-29d6-464e-8662-2c6a35a2a361",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("28ae2f6d-21b4-47e3-a623-663ef3cd9c77"),
                            Amount = 1200m,
                            BuyerId = new Guid("a98ee5e6-efef-47c4-bc92-bbd26d4591b9"),
                            CreatedAt = new DateTime(2025, 6, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 6, 15, 53, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/28ae2f6d-21b4-47e3-a623-663ef3cd9c77",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("63075259-a13a-4e43-b94c-90625872c5da"),
                            Amount = 0m,
                            BuyerId = new Guid("bd5f7c42-2b9a-41af-97af-04b6d8ce138a"),
                            CreatedAt = new DateTime(2025, 6, 7, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 7, 16, 6, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/63075259-a13a-4e43-b94c-90625872c5da",
                            Status = "paid"
                        },
                        new
                        {
                            Id = new Guid("70ef6e96-80e6-43f0-b85b-852d602c2f35"),
                            Amount = 0m,
                            BuyerId = new Guid("be52a04e-4be2-4d7e-8a5c-409013d72ba1"),
                            CreatedAt = new DateTime(2025, 6, 8, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            PaidAt = new DateTime(2025, 6, 8, 16, 0, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            QrUrl = "https://payment.example.com/70ef6e96-80e6-43f0-b85b-852d602c2f35",
                            Status = "paid"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d680c55-9f5a-47ca-9b8a-b3524b0830d7"),
                            AttendeeId = new Guid("a700f80d-dfdf-46aa-bf3a-911504065485"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            PaymentId = new Guid("236710f7-3a3e-40cb-93e7-bd779f03fe24"),
                            QRCode = "TKTd864fc46001"
                        },
                        new
                        {
                            Id = new Guid("b33a8512-1e4f-4bf3-8315-cc1d7a82050c"),
                            AttendeeId = new Guid("638c2954-c17f-4030-9d2d-0360e43d2b85"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            PaymentId = new Guid("236710f7-3a3e-40cb-93e7-bd779f03fe24"),
                            QRCode = "TKT5b7b5988002"
                        },
                        new
                        {
                            Id = new Guid("8e0da62c-cef1-4d4a-9248-ccdc097dab40"),
                            AttendeeId = new Guid("dc7cac57-399f-4910-ad68-06b6e8300249"),
                            EventId = new Guid("8ceacdc0-3f08-4893-a79f-a5ce100a4f72"),
                            PaymentId = new Guid("b00f0a9e-9a56-4c8d-af0e-df2d15ecd1df"),
                            QRCode = "TKT8ceacdc0003"
                        },
                        new
                        {
                            Id = new Guid("284ba885-250b-4924-b30c-1154280215e0"),
                            AttendeeId = new Guid("0a49c5c2-2151-48b6-bb6b-899e9cf760f2"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            PaymentId = new Guid("b00f0a9e-9a56-4c8d-af0e-df2d15ecd1df"),
                            QRCode = "TKTf2bdbbbf004"
                        },
                        new
                        {
                            Id = new Guid("1f2901a4-be40-48d9-9d9c-1de5c673a369"),
                            AttendeeId = new Guid("6bffe0a3-4408-4249-ae36-36565809ae9f"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            PaymentId = new Guid("d9329098-a3ad-471e-861f-25d17a54b052"),
                            QRCode = "TKTd864fc46005"
                        },
                        new
                        {
                            Id = new Guid("e00e7a25-c6b5-4988-9b8e-360fc4cbd360"),
                            AttendeeId = new Guid("4d9dc997-d7d9-47b7-a163-67bd95410cb1"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            PaymentId = new Guid("d9329098-a3ad-471e-861f-25d17a54b052"),
                            QRCode = "TKTf2bdbbbf006"
                        },
                        new
                        {
                            Id = new Guid("0ca576ef-b9f1-4437-b27c-dc87e1a0ce0c"),
                            AttendeeId = new Guid("269355b9-67f4-413b-b97e-19005e1d1899"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            PaymentId = new Guid("84757dd4-9913-4d16-945b-3657dd48818e"),
                            QRCode = "TKT37cd5435007"
                        },
                        new
                        {
                            Id = new Guid("e1028833-d55e-4e1f-8a66-758bf7c57e3b"),
                            AttendeeId = new Guid("482de6fc-411e-464c-a525-85082bbe58ee"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            PaymentId = new Guid("84757dd4-9913-4d16-945b-3657dd48818e"),
                            QRCode = "TKTd864fc46008"
                        },
                        new
                        {
                            Id = new Guid("13679d81-b942-4d59-8391-8cdb8662a83b"),
                            AttendeeId = new Guid("8bd89f32-817c-4f6a-ba1e-faec95dd4216"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            PaymentId = new Guid("6fadee5b-916c-4953-8610-bf1cd2dd03b5"),
                            QRCode = "TKTd43be1ec009"
                        },
                        new
                        {
                            Id = new Guid("b37d7c75-ac52-4d3d-b106-af2d75c2c207"),
                            AttendeeId = new Guid("0a49c5c2-2151-48b6-bb6b-899e9cf760f2"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            PaymentId = new Guid("6fadee5b-916c-4953-8610-bf1cd2dd03b5"),
                            QRCode = "TKTd43be1ec010"
                        },
                        new
                        {
                            Id = new Guid("03000fbd-4ea3-49eb-91ed-dd7484197da3"),
                            AttendeeId = new Guid("d604a11a-6e92-4bc4-af3c-585b28e5ccc5"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            PaymentId = new Guid("8e8976dd-6d13-4e2d-ba34-5e8755039b79"),
                            QRCode = "TKT37cd5435011"
                        },
                        new
                        {
                            Id = new Guid("00333c23-4312-4642-b2bb-fa446ad15628"),
                            AttendeeId = new Guid("269355b9-67f4-413b-b97e-19005e1d1899"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            PaymentId = new Guid("8e8976dd-6d13-4e2d-ba34-5e8755039b79"),
                            QRCode = "TKTd43be1ec012"
                        },
                        new
                        {
                            Id = new Guid("e1b383b1-ff6d-4f04-8ccb-c2413da1f87c"),
                            AttendeeId = new Guid("3c8db3a5-105d-4054-b080-47c967446149"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            PaymentId = new Guid("b88c88b1-29d6-464e-8662-2c6a35a2a361"),
                            QRCode = "TKT5b7b5988013"
                        },
                        new
                        {
                            Id = new Guid("8d9f949e-f861-484c-bd79-f4e77a390baf"),
                            AttendeeId = new Guid("52f87051-5f6c-4869-8535-351b9b0d049b"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            PaymentId = new Guid("b88c88b1-29d6-464e-8662-2c6a35a2a361"),
                            QRCode = "TKT5b7b5988014"
                        },
                        new
                        {
                            Id = new Guid("edd303a8-30e7-4f35-b12d-c74547523a64"),
                            AttendeeId = new Guid("05f7a3ea-9028-435e-ae24-374336a7286b"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            PaymentId = new Guid("28ae2f6d-21b4-47e3-a623-663ef3cd9c77"),
                            QRCode = "TKTf2bdbbbf015"
                        },
                        new
                        {
                            Id = new Guid("603f80ea-626f-4e43-9cfd-541b55ff354a"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec016"
                        },
                        new
                        {
                            Id = new Guid("ac278cbc-f2f6-4349-8d5d-005fb819f922"),
                            EventId = new Guid("528b32d2-de91-40b7-81a6-e1a49dc40a54"),
                            QRCode = "TKT528b32d2017"
                        },
                        new
                        {
                            Id = new Guid("68730227-8e52-4f6e-9073-bb16f1afdea0"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            QRCode = "TKTf2bdbbbf018"
                        },
                        new
                        {
                            Id = new Guid("70585432-d0da-4fc9-8a27-1e41fc62e2ea"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435019"
                        },
                        new
                        {
                            Id = new Guid("2cc4bf65-82ab-4691-b352-42c9a65a6ddf"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            QRCode = "TKTf2bdbbbf020"
                        },
                        new
                        {
                            Id = new Guid("731aeb77-b082-4d93-ba39-6d440ffd62af"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435021"
                        },
                        new
                        {
                            Id = new Guid("fe2860b5-c788-462c-a397-a9b26ed87314"),
                            EventId = new Guid("0d56bddc-ca2d-4141-a654-94dadd739fe5"),
                            QRCode = "TKT0d56bddc022"
                        },
                        new
                        {
                            Id = new Guid("c71e22c7-1fda-4d74-b4e6-f92bbb244d15"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435023"
                        },
                        new
                        {
                            Id = new Guid("1b5a9ec0-6de2-4037-bf1a-d34b5763c35e"),
                            EventId = new Guid("a482e26c-a668-4af0-b775-f5222683a8c8"),
                            QRCode = "TKTa482e26c024"
                        },
                        new
                        {
                            Id = new Guid("1ace637a-f226-441a-b3e4-1fcc0cb455dc"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            QRCode = "TKTf2bdbbbf025"
                        },
                        new
                        {
                            Id = new Guid("129f4b5f-475e-4af5-9805-4569a36ca215"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435026"
                        },
                        new
                        {
                            Id = new Guid("29730f3d-68e3-4d41-8469-62ebe7f9caf3"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec027"
                        },
                        new
                        {
                            Id = new Guid("e0971454-d7f1-4ebe-9bfb-075701224ec9"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            QRCode = "TKT5b7b5988028"
                        },
                        new
                        {
                            Id = new Guid("cbeeefec-6761-4b94-a8a2-a5e9818437a2"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec029"
                        },
                        new
                        {
                            Id = new Guid("00c45b7e-6446-4c7a-8a43-346f599c2d4b"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec030"
                        },
                        new
                        {
                            Id = new Guid("c9fd5c42-e6bb-4254-9ab4-97bd2bd13c57"),
                            EventId = new Guid("8ceacdc0-3f08-4893-a79f-a5ce100a4f72"),
                            QRCode = "TKT8ceacdc0031"
                        },
                        new
                        {
                            Id = new Guid("f134af38-7397-401b-8088-753b90f7ab28"),
                            EventId = new Guid("0d56bddc-ca2d-4141-a654-94dadd739fe5"),
                            QRCode = "TKT0d56bddc032"
                        },
                        new
                        {
                            Id = new Guid("41267beb-c9fd-44b9-aa2e-0f510712f72c"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            QRCode = "TKTd864fc46033"
                        },
                        new
                        {
                            Id = new Guid("1b629593-7142-4d8e-b00b-983f0162c801"),
                            EventId = new Guid("441eb09d-ef74-4198-9d22-4153ff1366a6"),
                            QRCode = "TKT441eb09d034"
                        },
                        new
                        {
                            Id = new Guid("d565406d-2d26-4a73-9e8e-0981ae0c6a3a"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec035"
                        },
                        new
                        {
                            Id = new Guid("1db4e669-1a1d-4169-8884-c547b1bcf872"),
                            EventId = new Guid("441eb09d-ef74-4198-9d22-4153ff1366a6"),
                            QRCode = "TKT441eb09d036"
                        },
                        new
                        {
                            Id = new Guid("708f7395-cd4f-4d59-989b-ea9c19faa792"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435037"
                        },
                        new
                        {
                            Id = new Guid("1344ac77-40df-434b-ba3e-15cfabdeb883"),
                            EventId = new Guid("f2bdbbbf-c407-4fe8-b81a-afd85e45bd6a"),
                            QRCode = "TKTf2bdbbbf038"
                        },
                        new
                        {
                            Id = new Guid("2d84312e-f1ca-4ec5-9b04-6d561f869974"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec039"
                        },
                        new
                        {
                            Id = new Guid("cc192b23-4854-42a9-900a-24b8cfa75fde"),
                            EventId = new Guid("528b32d2-de91-40b7-81a6-e1a49dc40a54"),
                            QRCode = "TKT528b32d2040"
                        },
                        new
                        {
                            Id = new Guid("295a3cb7-4c30-4139-9262-f70ec84e4001"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435041"
                        },
                        new
                        {
                            Id = new Guid("ad808136-d307-4c50-a203-1cef0c1fd11b"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            QRCode = "TKT5b7b5988042"
                        },
                        new
                        {
                            Id = new Guid("89f78ead-0c34-4c33-bfe9-49001c08b3ea"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            QRCode = "TKT5b7b5988043"
                        },
                        new
                        {
                            Id = new Guid("ce191abc-3b1f-44c0-9107-3c55367665f5"),
                            EventId = new Guid("a482e26c-a668-4af0-b775-f5222683a8c8"),
                            QRCode = "TKTa482e26c044"
                        },
                        new
                        {
                            Id = new Guid("daa71b64-ec86-4b82-a0ba-d545921624c0"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            QRCode = "TKTd864fc46045"
                        },
                        new
                        {
                            Id = new Guid("b879c97f-9cc4-42c8-b202-74bc9c03a952"),
                            EventId = new Guid("5b7b5988-cdce-4724-bbb7-476db0785ee1"),
                            QRCode = "TKT5b7b5988046"
                        },
                        new
                        {
                            Id = new Guid("38bbb29d-374a-4f33-819e-4aa8a87a919f"),
                            EventId = new Guid("0d56bddc-ca2d-4141-a654-94dadd739fe5"),
                            QRCode = "TKT0d56bddc047"
                        },
                        new
                        {
                            Id = new Guid("4635f2da-c0f0-440d-9dc0-d2c02775ccaf"),
                            EventId = new Guid("37cd5435-ee58-41f7-ab33-6b302a457dc7"),
                            QRCode = "TKT37cd5435048"
                        },
                        new
                        {
                            Id = new Guid("262449e1-19fb-4557-abe1-2f87b1a56226"),
                            EventId = new Guid("d43be1ec-ddc0-4330-99ed-c513636f7b52"),
                            QRCode = "TKTd43be1ec049"
                        },
                        new
                        {
                            Id = new Guid("570fb42a-367b-4e0a-b456-341e677972bf"),
                            EventId = new Guid("d864fc46-723a-4b22-a5f4-2b69c562bacc"),
                            QRCode = "TKTd864fc46050"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d552548-659f-45e8-9925-61e65e31a53c"),
                            BirthDate = new DateTime(1999, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6382),
                            CreatedAt = new DateTime(2025, 5, 5, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user1@example.com",
                            FullName = "Иванов Иван 1",
                            PasswordHash = "hash123",
                            Phone = "+79000000001",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("14b89b15-41d3-4648-ba8a-e27d8a38be5c"),
                            BirthDate = new DateTime(2001, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6392),
                            CreatedAt = new DateTime(2025, 5, 6, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user2@example.com",
                            FullName = "Иванов Иван 2",
                            PasswordHash = "hash123",
                            Phone = "+79000000002",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("daae1eef-841b-4444-80b1-4cc0a4201503"),
                            BirthDate = new DateTime(2001, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6455),
                            CreatedAt = new DateTime(2025, 5, 7, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user3@example.com",
                            FullName = "Иванов Иван 3",
                            PasswordHash = "hash123",
                            Phone = "+79000000003",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("f8e38584-806b-457e-aad8-9996a406a883"),
                            BirthDate = new DateTime(2002, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6461),
                            CreatedAt = new DateTime(2025, 5, 8, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user4@example.com",
                            FullName = "Иванов Иван 4",
                            PasswordHash = "hash123",
                            Phone = "+79000000004",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("bd5f7c42-2b9a-41af-97af-04b6d8ce138a"),
                            BirthDate = new DateTime(2002, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6465),
                            CreatedAt = new DateTime(2025, 5, 9, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user5@example.com",
                            FullName = "Иванов Иван 5",
                            PasswordHash = "hash123",
                            Phone = "+79000000005",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("be52a04e-4be2-4d7e-8a5c-409013d72ba1"),
                            BirthDate = new DateTime(1997, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6470),
                            CreatedAt = new DateTime(2025, 5, 10, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user6@example.com",
                            FullName = "Иванов Иван 6",
                            PasswordHash = "hash123",
                            Phone = "+79000000006",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("6b7ff871-84d1-4577-812d-d543c01d730c"),
                            BirthDate = new DateTime(1996, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6474),
                            CreatedAt = new DateTime(2025, 5, 11, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user7@example.com",
                            FullName = "Иванов Иван 7",
                            PasswordHash = "hash123",
                            Phone = "+79000000007",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("6bc4adef-d7db-4788-b290-14c286474cc0"),
                            BirthDate = new DateTime(1994, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6478),
                            CreatedAt = new DateTime(2025, 5, 12, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user8@example.com",
                            FullName = "Иванов Иван 8",
                            PasswordHash = "hash123",
                            Phone = "+79000000008",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2ff0fb86-563d-4845-bd45-709b3a1d1f40"),
                            BirthDate = new DateTime(1989, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6482),
                            CreatedAt = new DateTime(2025, 5, 13, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user9@example.com",
                            FullName = "Иванов Иван 9",
                            PasswordHash = "hash123",
                            Phone = "+79000000009",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("136749bf-4820-42fb-ba5f-e49e1e151210"),
                            BirthDate = new DateTime(1989, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6489),
                            CreatedAt = new DateTime(2025, 5, 14, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user10@example.com",
                            FullName = "Иванов Иван 10",
                            PasswordHash = "hash123",
                            Phone = "+79000000010",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("7d740557-77de-49da-9882-d12122f6f1e6"),
                            BirthDate = new DateTime(1993, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6493),
                            CreatedAt = new DateTime(2025, 5, 15, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user11@example.com",
                            FullName = "Иванов Иван 11",
                            PasswordHash = "hash123",
                            Phone = "+79000000011",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b4c45b06-5158-43ef-a209-4e2d87689a9b"),
                            BirthDate = new DateTime(1988, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6498),
                            CreatedAt = new DateTime(2025, 5, 16, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user12@example.com",
                            FullName = "Иванов Иван 12",
                            PasswordHash = "hash123",
                            Phone = "+79000000012",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("daa4f299-b390-4384-bf81-61656b3f7221"),
                            BirthDate = new DateTime(1991, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6501),
                            CreatedAt = new DateTime(2025, 5, 17, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user13@example.com",
                            FullName = "Иванов Иван 13",
                            PasswordHash = "hash123",
                            Phone = "+79000000013",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("15e95276-17f9-44bc-9bcb-07cee7dd58b6"),
                            BirthDate = new DateTime(1990, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6505),
                            CreatedAt = new DateTime(2025, 5, 18, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user14@example.com",
                            FullName = "Иванов Иван 14",
                            PasswordHash = "hash123",
                            Phone = "+79000000014",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("e708edcd-93bb-4fcd-aab1-d30e0bb069d4"),
                            BirthDate = new DateTime(2001, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6508),
                            CreatedAt = new DateTime(2025, 5, 19, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user15@example.com",
                            FullName = "Иванов Иван 15",
                            PasswordHash = "hash123",
                            Phone = "+79000000015",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("06c98e8c-1fb4-4d24-bcd4-f505e1e4f329"),
                            BirthDate = new DateTime(1995, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6510),
                            CreatedAt = new DateTime(2025, 5, 20, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user16@example.com",
                            FullName = "Иванов Иван 16",
                            PasswordHash = "hash123",
                            Phone = "+79000000016",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("2d1e5bdc-7c2e-4ddd-ab05-1f89ed59b9f6"),
                            BirthDate = new DateTime(1992, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6513),
                            CreatedAt = new DateTime(2025, 5, 21, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user17@example.com",
                            FullName = "Иванов Иван 17",
                            PasswordHash = "hash123",
                            Phone = "+79000000017",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("a98ee5e6-efef-47c4-bc92-bbd26d4591b9"),
                            BirthDate = new DateTime(1986, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6518),
                            CreatedAt = new DateTime(2025, 5, 22, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user18@example.com",
                            FullName = "Иванов Иван 18",
                            PasswordHash = "hash123",
                            Phone = "+79000000018",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("60b67356-fb07-4c98-906a-cdde28a419e6"),
                            BirthDate = new DateTime(1990, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6521),
                            CreatedAt = new DateTime(2025, 5, 23, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user19@example.com",
                            FullName = "Иванов Иван 19",
                            PasswordHash = "hash123",
                            Phone = "+79000000019",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("d6e30141-983a-4cbf-8316-a41ae3c75f3d"),
                            BirthDate = new DateTime(1993, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6526),
                            CreatedAt = new DateTime(2025, 5, 24, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "user20@example.com",
                            FullName = "Иванов Иван 20",
                            PasswordHash = "hash123",
                            Phone = "+79000000020",
                            Role = "user"
                        },
                        new
                        {
                            Id = new Guid("b4df66bd-f199-48f6-ad56-47b23516b8c6"),
                            BirthDate = new DateTime(1994, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6534),
                            CreatedAt = new DateTime(2025, 4, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "admin1@example.com",
                            FullName = "Администратор 1",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000001",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("7e6ed28e-17c3-4e3a-b6f7-a2717b36c902"),
                            BirthDate = new DateTime(1988, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6539),
                            CreatedAt = new DateTime(2025, 4, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "admin2@example.com",
                            FullName = "Администратор 2",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000002",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("7f175dfa-fad1-4332-9981-1d7ca5653540"),
                            BirthDate = new DateTime(1991, 6, 3, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6543),
                            CreatedAt = new DateTime(2025, 4, 4, 15, 40, 53, 168, DateTimeKind.Utc).AddTicks(6207),
                            Email = "admin3@example.com",
                            FullName = "Администратор 3",
                            PasswordHash = "hashadmin",
                            Phone = "+79990000003",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttendees");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventCalendars");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.HasOne("Core.Model.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Core.Model.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId");

                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Core.Model.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Attendee");

                    b.Navigation("Event");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Model.Entities.UserAttendee", b =>
                {
                    b.HasOne("Core.Model.Entities.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.UserEventCalendar", b =>
                {
                    b.HasOne("Core.Model.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Model.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Model.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
